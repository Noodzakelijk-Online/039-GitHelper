{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\aruat\\\\OneDrive\\\\Desktop\\\\git-Drag-Drop\\\\browser-app\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Octokit } from '@octokit/rest';\nimport { AppContainer, Header, Title, UserInfo, UserName, LoginButton, LogoutButton, MainContent, Sidebar, SidebarHeader, RepoList, RepoItem, Content, RepositoryHeader, RepoName, BranchSelector, PathNavigator, PathItem, PathSeparator, FileExplorer, FileItem, FileIcon, FileName, DropZone, DropZoneText, WelcomeMessage, Notification, Modal, ModalContent, ModalHeader, CloseButton, ModalBody, FileList, FileListItem, CommitMessageInput, ModalFooter, CancelButton, UploadButton } from './styles/StyledComponents';\n\n// GitHub OAuth App credentials would normally be stored securely\n// For demo purposes, we're using placeholder values\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst GITHUB_CLIENT_ID = 'Ov23liar9wjLDWrJz1Lx';\nconst GITHUB_CLIENT_SECRET = '501fe2d9197171e5130909d0794f1eb08d57298f';\nconst App = () => {\n  _s();\n  // State variables\n  const [authenticated, setAuthenticated] = useState(false);\n  const [octokit, setOctokit] = useState(null);\n  const [user, setUser] = useState(null);\n  const [repositories, setRepositories] = useState([]);\n  const [selectedRepo, setSelectedRepo] = useState(null);\n  const [currentPath, setCurrentPath] = useState('/');\n  const [contents, setContents] = useState([]);\n  const [branches, setBranches] = useState([]);\n  const [currentBranch, setCurrentBranch] = useState('main');\n  const [commitMessage, setCommitMessage] = useState('');\n  const [notification, setNotification] = useState(null);\n  const [uploadFiles, setUploadFiles] = useState([]);\n  const [showUploadModal, setShowUploadModal] = useState(false);\n\n  // Initialize GitHub on component mount\n  useEffect(() => {\n    // Check if we have a token in localStorage\n    const token = localStorage.getItem('github_token');\n    if (token) {\n      initializeGitHub(token);\n    }\n  }, []);\n\n  // Initialize GitHub with token\n  const initializeGitHub = async token => {\n    try {\n      const octokitInstance = new Octokit({\n        auth: token\n      });\n      setOctokit(octokitInstance);\n\n      // Get authenticated user\n      const {\n        data: userData\n      } = await octokitInstance.users.getAuthenticated();\n      setUser(userData);\n      setAuthenticated(true);\n\n      // Load user repositories\n      await loadUserRepositories(octokitInstance);\n      showNotification('success', `Logged in as ${userData.login}`);\n    } catch (error) {\n      console.error('Authentication error:', error);\n      localStorage.removeItem('github_token');\n      setAuthenticated(false);\n      showNotification('error', 'Authentication failed');\n    }\n  };\n\n  // Load user repositories\n  const loadUserRepositories = async octokitInstance => {\n    try {\n      const {\n        data: repos\n      } = await octokitInstance.repos.listForAuthenticatedUser({\n        sort: 'updated',\n        per_page: 100\n      });\n      setRepositories(repos);\n    } catch (error) {\n      console.error('Error loading repositories:', error);\n      showNotification('error', 'Failed to load repositories');\n    }\n  };\n\n  // Load repository contents\n  const loadRepositoryContents = async (repo, path = '', branch = 'main') => {\n    if (!octokit || !repo) return;\n    try {\n      const {\n        data: contentsData\n      } = await octokit.repos.getContent({\n        owner: repo.owner.login,\n        repo: repo.name,\n        path: path || '',\n        ref: branch\n      });\n      setContents(Array.isArray(contentsData) ? contentsData : [contentsData]);\n      setCurrentPath(path || '/');\n\n      // Also load branches\n      const {\n        data: branchesData\n      } = await octokit.repos.listBranches({\n        owner: repo.owner.login,\n        repo: repo.name\n      });\n      setBranches(branchesData.map(b => b.name));\n      setCurrentBranch(branch);\n    } catch (error) {\n      console.error('Error loading repository contents:', error);\n      showNotification('error', 'Failed to load repository contents');\n    }\n  };\n\n  // Handle repository selection\n  const handleSelectRepository = async repo => {\n    setSelectedRepo(repo);\n    await loadRepositoryContents(repo);\n  };\n\n  // Handle branch selection\n  const handleSelectBranch = async branch => {\n    if (selectedRepo) {\n      await loadRepositoryContents(selectedRepo, currentPath, branch);\n    }\n  };\n\n  // Handle directory navigation\n  const handleNavigate = async item => {\n    if (item.type === 'dir') {\n      await loadRepositoryContents(selectedRepo, item.path, currentBranch);\n    } else {\n      // View file content\n      try {\n        const {\n          data: fileData\n        } = await octokit.repos.getContent({\n          owner: selectedRepo.owner.login,\n          repo: selectedRepo.name,\n          path: item.path,\n          ref: currentBranch\n        });\n\n        // For binary files, fileData.content will be base64 encoded\n        // For text files, we can decode and display\n        if (fileData.encoding === 'base64' && !isImageFile(fileData.name)) {\n          const content = atob(fileData.content);\n          // Here you would display the file content in a modal or viewer\n          console.log('File content:', content);\n          showNotification('info', `Viewing file: ${item.name}`);\n        } else if (isImageFile(fileData.name)) {\n          // Handle image files\n          const imageUrl = `data:image/png;base64,${fileData.content}`;\n          // Display image in a modal or viewer\n          console.log('Image URL:', imageUrl);\n          showNotification('info', `Viewing image: ${item.name}`);\n        }\n      } catch (error) {\n        console.error('Error loading file content:', error);\n        showNotification('error', 'Failed to load file content');\n      }\n    }\n  };\n\n  // Check if file is an image\n  const isImageFile = filename => {\n    const imageExtensions = ['.png', '.jpg', '.jpeg', '.gif', '.svg', '.webp'];\n    return imageExtensions.some(ext => filename.toLowerCase().endsWith(ext));\n  };\n\n  // Handle file upload via drag and drop\n  // Handle file upload via drag and drop\n  const handleDrop = e => {\n    e.preventDefault();\n    e.stopPropagation();\n    if (!authenticated || !selectedRepo) {\n      showNotification('error', 'Please select a repository first');\n      return;\n    }\n    const items = e.dataTransfer.items;\n    const files = [];\n    const folders = new Map(); // Track folders and their files\n\n    // Process all items\n    const processEntry = async (entry, path = '') => {\n      if (entry.isFile) {\n        entry.file(file => {\n          // Add path information to the file object\n          file.relativePath = path ? `${path}/${file.name}` : file.name;\n          files.push(file);\n        });\n      } else if (entry.isDirectory) {\n        // Process directory\n        const dirReader = entry.createReader();\n        const readEntries = () => {\n          dirReader.readEntries(entries => {\n            if (entries.length > 0) {\n              // Process each entry in the directory\n              entries.forEach(subEntry => {\n                processEntry(subEntry, path ? `${path}/${entry.name}` : entry.name);\n              });\n              // Continue reading if there are more entries\n              readEntries();\n            }\n          });\n        };\n        readEntries();\n      }\n    };\n\n    // Process all dropped items\n    if (items) {\n      for (let i = 0; i < items.length; i++) {\n        const item = items[i];\n        if (item.kind === 'file') {\n          const entry = item.webkitGetAsEntry || item.getAsEntry();\n          if (entry) {\n            processEntry(entry);\n          }\n        }\n      }\n    }\n\n    // Wait for all files to be processed\n    setTimeout(() => {\n      if (files.length > 0) {\n        setUploadFiles(files);\n        setShowUploadModal(true);\n      }\n    }, 500);\n  };\n\n  // Handle drag over\n  const handleDragOver = e => {\n    e.preventDefault();\n    e.stopPropagation();\n  };\n\n  // Handle file upload and commit\n  // Handle file upload and commit\n  const handleUploadFiles = async () => {\n    if (!commitMessage.trim()) {\n      showNotification('error', 'Please enter a commit message');\n      return;\n    }\n    try {\n      // Get the latest commit SHA for the branch\n      const {\n        data: refData\n      } = await octokit.git.getRef({\n        owner: selectedRepo.owner.login,\n        repo: selectedRepo.name,\n        ref: `heads/${currentBranch}`\n      });\n      const latestCommitSha = refData.object.sha;\n\n      // Get the base tree\n      const {\n        data: commitData\n      } = await octokit.git.getCommit({\n        owner: selectedRepo.owner.login,\n        repo: selectedRepo.name,\n        commit_sha: latestCommitSha\n      });\n      const baseTreeSha = commitData.tree.sha;\n\n      // Create blobs for each file\n      const fileBlobs = await Promise.all(uploadFiles.map(async file => {\n        // Read file content\n        const content = await readFileAsBase64(file);\n\n        // Create blob\n        const {\n          data: blobData\n        } = await octokit.git.createBlob({\n          owner: selectedRepo.owner.login,\n          repo: selectedRepo.name,\n          content: content,\n          encoding: 'base64'\n        });\n\n        // Use the relativePath if available (for folders), otherwise use the file name\n        const filePath = file.relativePath || (currentPath === '/' ? file.name : `${currentPath}/${file.name}`);\n        return {\n          path: filePath,\n          mode: '100644',\n          // Regular file\n          type: 'blob',\n          sha: blobData.sha\n        };\n      }));\n\n      // Create tree\n      const {\n        data: treeData\n      } = await octokit.git.createTree({\n        owner: selectedRepo.owner.login,\n        repo: selectedRepo.name,\n        base_tree: baseTreeSha,\n        tree: fileBlobs\n      });\n\n      // Create commit\n      const {\n        data: newCommitData\n      } = await octokit.git.createCommit({\n        owner: selectedRepo.owner.login,\n        repo: selectedRepo.name,\n        message: commitMessage,\n        tree: treeData.sha,\n        parents: [latestCommitSha]\n      });\n\n      // Update branch reference\n      await octokit.git.updateRef({\n        owner: selectedRepo.owner.login,\n        repo: selectedRepo.name,\n        ref: `heads/${currentBranch}`,\n        sha: newCommitData.sha,\n        force: true // Add force option to avoid \"not a fast forward\" errors\n      });\n\n      // Refresh contents\n      await loadRepositoryContents(selectedRepo, currentPath, currentBranch);\n\n      // Close modal and clear state\n      setShowUploadModal(false);\n      setUploadFiles([]);\n      setCommitMessage('');\n      showNotification('success', `Successfully uploaded ${uploadFiles.length} file(s)`);\n    } catch (error) {\n      console.error('Error uploading files:', error);\n      showNotification('error', 'Failed to upload files');\n    }\n  };\n  ;\n\n  // Read file as base64\n  // Improved readFileAsBase64 function with better error handling\n  const readFileAsBase64 = file => {\n    return new Promise((resolve, reject) => {\n      try {\n        const reader = new FileReader();\n        reader.onload = () => {\n          try {\n            // Remove the data URL prefix (e.g., \"data:application/pdf;base64,\")\n            const base64 = reader.result.split(',')[1];\n            resolve(base64);\n          } catch (error) {\n            console.error('Error processing file data:', error);\n            reject(error);\n          }\n        };\n        reader.onerror = error => {\n          console.error('FileReader error:', error);\n          reject(error);\n        };\n\n        // Add a timeout in case the read operation hangs\n        setTimeout(() => {\n          if (reader.readyState !== 2) {\n            reject(new Error('FileReader timeout'));\n          }\n        }, 10000);\n        reader.readAsDataURL(file);\n      } catch (error) {\n        console.error('Error setting up FileReader:', error);\n        reject(error);\n      }\n    });\n  };\n\n  // Show notification\n  const showNotification = (type, message) => {\n    setNotification({\n      type,\n      message\n    });\n    setTimeout(() => setNotification(null), 5000);\n  };\n\n  // Handle login\n  const handleLogin = () => {\n    // For demo purposes, we're using a simplified approach\n    const token = prompt('Enter your GitHub token:');\n    if (token) {\n      localStorage.setItem('github_token', token);\n      initializeGitHub(token);\n    }\n  };\n\n  // Handle logout\n  const handleLogout = () => {\n    localStorage.removeItem('github_token');\n    setAuthenticated(false);\n    setUser(null);\n    setOctokit(null);\n    setRepositories([]);\n    setSelectedRepo(null);\n    setContents([]);\n  };\n  return /*#__PURE__*/_jsxDEV(AppContainer, {\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      children: [/*#__PURE__*/_jsxDEV(Title, {\n        children: \"Git Helper Web\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 432,\n        columnNumber: 9\n      }, this), authenticated ? /*#__PURE__*/_jsxDEV(UserInfo, {\n        children: [user && /*#__PURE__*/_jsxDEV(UserName, {\n          children: user.login\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 435,\n          columnNumber: 22\n        }, this), /*#__PURE__*/_jsxDEV(LogoutButton, {\n          onClick: handleLogout,\n          children: \"Logout\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 436,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 434,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(LoginButton, {\n        onClick: handleLogin,\n        children: \"Login with GitHub\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 439,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 431,\n      columnNumber: 7\n    }, this), authenticated ? /*#__PURE__*/_jsxDEV(MainContent, {\n      children: [/*#__PURE__*/_jsxDEV(Sidebar, {\n        children: [/*#__PURE__*/_jsxDEV(SidebarHeader, {\n          children: \"Repositories\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 446,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(RepoList, {\n          children: repositories.map(repo => /*#__PURE__*/_jsxDEV(RepoItem, {\n            selected: selectedRepo && selectedRepo.id === repo.id,\n            onClick: () => handleSelectRepository(repo),\n            children: repo.name\n          }, repo.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 449,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 447,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 445,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Content, {\n        children: selectedRepo ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(RepositoryHeader, {\n            children: [/*#__PURE__*/_jsxDEV(RepoName, {\n              children: selectedRepo.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 464,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(BranchSelector, {\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                children: \"Branch:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 466,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n                value: currentBranch,\n                onChange: e => handleSelectBranch(e.target.value),\n                children: branches.map(branch => /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: branch,\n                  children: branch\n                }, branch, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 472,\n                  columnNumber: 25\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 467,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 465,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 463,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(PathNavigator, {\n            children: [/*#__PURE__*/_jsxDEV(PathItem, {\n              onClick: () => loadRepositoryContents(selectedRepo, '', currentBranch),\n              children: \"Root\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 479,\n              columnNumber: 19\n            }, this), currentPath !== '/' && currentPath.split('/').filter(Boolean).map((part, index, array) => {\n              const path = array.slice(0, index + 1).join('/');\n              return /*#__PURE__*/_jsxDEV(React.Fragment, {\n                children: [/*#__PURE__*/_jsxDEV(PathSeparator, {\n                  children: \"/\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 486,\n                  columnNumber: 25\n                }, this), /*#__PURE__*/_jsxDEV(PathItem, {\n                  onClick: () => loadRepositoryContents(selectedRepo, path, currentBranch),\n                  children: part\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 487,\n                  columnNumber: 25\n                }, this)]\n              }, path, true, {\n                fileName: _jsxFileName,\n                lineNumber: 485,\n                columnNumber: 23\n              }, this);\n            })]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 478,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(FileExplorer, {\n            children: contents.map(item => /*#__PURE__*/_jsxDEV(FileItem, {\n              onClick: () => handleNavigate(item),\n              children: [/*#__PURE__*/_jsxDEV(FileIcon, {\n                children: item.type === 'dir' ? '📁' : '📄'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 501,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(FileName, {\n                children: item.name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 502,\n                columnNumber: 23\n              }, this)]\n            }, item.sha, true, {\n              fileName: _jsxFileName,\n              lineNumber: 497,\n              columnNumber: 21\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 495,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(DropZone, {\n            onDragOver: handleDragOver,\n            onDrop: handleDrop,\n            children: /*#__PURE__*/_jsxDEV(DropZoneText, {\n              children: \"Drop files here to upload to current directory\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 511,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 507,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true) : /*#__PURE__*/_jsxDEV(WelcomeMessage, {\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Select a Repository\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 516,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Choose a repository from the sidebar to get started\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 517,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 515,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 460,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 444,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(WelcomeMessage, {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Welcome to Git Helper Web\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 524,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Please login with GitHub to get started\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 525,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(LoginButton, {\n        onClick: handleLogin,\n        children: \"Login with GitHub\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 526,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 523,\n      columnNumber: 9\n    }, this), notification && /*#__PURE__*/_jsxDEV(Notification, {\n      type: notification.type,\n      children: notification.message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 531,\n      columnNumber: 9\n    }, this), showUploadModal && /*#__PURE__*/_jsxDEV(Modal, {\n      children: /*#__PURE__*/_jsxDEV(ModalContent, {\n        children: [/*#__PURE__*/_jsxDEV(ModalHeader, {\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Upload Files\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 540,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(CloseButton, {\n            onClick: () => setShowUploadModal(false),\n            children: \"\\xD7\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 541,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 539,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(ModalBody, {\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            children: \"Files to upload:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 544,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(FileList, {\n            children: uploadFiles.map((file, index) => /*#__PURE__*/_jsxDEV(FileListItem, {\n              children: [file.name, \" (\", (file.size / 1024).toFixed(2), \" KB)\"]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 547,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 545,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(CommitMessageInput, {\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"Commit message:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 553,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n              value: commitMessage,\n              onChange: e => setCommitMessage(e.target.value),\n              placeholder: \"Enter commit message...\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 554,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 552,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 543,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(ModalFooter, {\n          children: [/*#__PURE__*/_jsxDEV(CancelButton, {\n            onClick: () => setShowUploadModal(false),\n            children: \"Cancel\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 562,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(UploadButton, {\n            onClick: handleUploadFiles,\n            children: \"Commit Changes\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 563,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 561,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 538,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 537,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 430,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"akxIcS7n/dZWatwv3tAmITdfwDU=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","Octokit","AppContainer","Header","Title","UserInfo","UserName","LoginButton","LogoutButton","MainContent","Sidebar","SidebarHeader","RepoList","RepoItem","Content","RepositoryHeader","RepoName","BranchSelector","PathNavigator","PathItem","PathSeparator","FileExplorer","FileItem","FileIcon","FileName","DropZone","DropZoneText","WelcomeMessage","Notification","Modal","ModalContent","ModalHeader","CloseButton","ModalBody","FileList","FileListItem","CommitMessageInput","ModalFooter","CancelButton","UploadButton","jsxDEV","_jsxDEV","Fragment","_Fragment","GITHUB_CLIENT_ID","GITHUB_CLIENT_SECRET","App","_s","authenticated","setAuthenticated","octokit","setOctokit","user","setUser","repositories","setRepositories","selectedRepo","setSelectedRepo","currentPath","setCurrentPath","contents","setContents","branches","setBranches","currentBranch","setCurrentBranch","commitMessage","setCommitMessage","notification","setNotification","uploadFiles","setUploadFiles","showUploadModal","setShowUploadModal","token","localStorage","getItem","initializeGitHub","octokitInstance","auth","data","userData","users","getAuthenticated","loadUserRepositories","showNotification","login","error","console","removeItem","repos","listForAuthenticatedUser","sort","per_page","loadRepositoryContents","repo","path","branch","contentsData","getContent","owner","name","ref","Array","isArray","branchesData","listBranches","map","b","handleSelectRepository","handleSelectBranch","handleNavigate","item","type","fileData","encoding","isImageFile","content","atob","log","imageUrl","filename","imageExtensions","some","ext","toLowerCase","endsWith","handleDrop","e","preventDefault","stopPropagation","items","dataTransfer","files","folders","Map","processEntry","entry","isFile","file","relativePath","push","isDirectory","dirReader","createReader","readEntries","entries","length","forEach","subEntry","i","kind","webkitGetAsEntry","getAsEntry","setTimeout","handleDragOver","handleUploadFiles","trim","refData","git","getRef","latestCommitSha","object","sha","commitData","getCommit","commit_sha","baseTreeSha","tree","fileBlobs","Promise","all","readFileAsBase64","blobData","createBlob","filePath","mode","treeData","createTree","base_tree","newCommitData","createCommit","message","parents","updateRef","force","resolve","reject","reader","FileReader","onload","base64","result","split","onerror","readyState","Error","readAsDataURL","handleLogin","prompt","setItem","handleLogout","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","selected","id","value","onChange","target","filter","Boolean","part","index","array","slice","join","onDragOver","onDrop","size","toFixed","placeholder","_c","$RefreshReg$"],"sources":["C:/Users/aruat/OneDrive/Desktop/git-Drag-Drop/browser-app/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Octokit } from '@octokit/rest';\r\nimport {\r\n  AppContainer,\r\n  Header,\r\n  Title,\r\n  UserInfo,\r\n  UserName,\r\n  LoginButton,\r\n  LogoutButton,\r\n  MainContent,\r\n  Sidebar,\r\n  SidebarHeader,\r\n  RepoList,\r\n  RepoItem,\r\n  Content,\r\n  RepositoryHeader,\r\n  RepoName,\r\n  BranchSelector,\r\n  PathNavigator,\r\n  PathItem,\r\n  PathSeparator,\r\n  FileExplorer,\r\n  FileItem,\r\n  FileIcon,\r\n  FileName,\r\n  DropZone,\r\n  DropZoneText,\r\n  WelcomeMessage,\r\n  Notification,\r\n  Modal,\r\n  ModalContent,\r\n  ModalHeader,\r\n  CloseButton,\r\n  ModalBody,\r\n  FileList,\r\n  FileListItem,\r\n  CommitMessageInput,\r\n  ModalFooter,\r\n  CancelButton,\r\n  UploadButton\r\n} from './styles/StyledComponents';\r\n\r\n// GitHub OAuth App credentials would normally be stored securely\r\n// For demo purposes, we're using placeholder values\r\nconst GITHUB_CLIENT_ID = 'Ov23liar9wjLDWrJz1Lx';\r\nconst GITHUB_CLIENT_SECRET = '501fe2d9197171e5130909d0794f1eb08d57298f';\r\n\r\nconst App = () => {\r\n  // State variables\r\n  const [authenticated, setAuthenticated] = useState(false);\r\n  const [octokit, setOctokit] = useState(null);\r\n  const [user, setUser] = useState(null);\r\n  const [repositories, setRepositories] = useState([]);\r\n  const [selectedRepo, setSelectedRepo] = useState(null);\r\n  const [currentPath, setCurrentPath] = useState('/');\r\n  const [contents, setContents] = useState([]);\r\n  const [branches, setBranches] = useState([]);\r\n  const [currentBranch, setCurrentBranch] = useState('main');\r\n  const [commitMessage, setCommitMessage] = useState('');\r\n  const [notification, setNotification] = useState(null);\r\n  const [uploadFiles, setUploadFiles] = useState([]);\r\n  const [showUploadModal, setShowUploadModal] = useState(false);\r\n\r\n  // Initialize GitHub on component mount\r\n  useEffect(() => {\r\n    // Check if we have a token in localStorage\r\n    const token = localStorage.getItem('github_token');\r\n    \r\n    if (token) {\r\n      initializeGitHub(token);\r\n    }\r\n  }, []);\r\n\r\n  // Initialize GitHub with token\r\n  const initializeGitHub = async (token) => {\r\n    try {\r\n      const octokitInstance = new Octokit({\r\n        auth: token\r\n      });\r\n      \r\n      setOctokit(octokitInstance);\r\n      \r\n      // Get authenticated user\r\n      const { data: userData } = await octokitInstance.users.getAuthenticated();\r\n      setUser(userData);\r\n      setAuthenticated(true);\r\n      \r\n      // Load user repositories\r\n      await loadUserRepositories(octokitInstance);\r\n      \r\n      showNotification('success', `Logged in as ${userData.login}`);\r\n    } catch (error) {\r\n      console.error('Authentication error:', error);\r\n      localStorage.removeItem('github_token');\r\n      setAuthenticated(false);\r\n      showNotification('error', 'Authentication failed');\r\n    }\r\n  };\r\n\r\n  // Load user repositories\r\n  const loadUserRepositories = async (octokitInstance) => {\r\n    try {\r\n      const { data: repos } = await octokitInstance.repos.listForAuthenticatedUser({\r\n        sort: 'updated',\r\n        per_page: 100\r\n      });\r\n      setRepositories(repos);\r\n    } catch (error) {\r\n      console.error('Error loading repositories:', error);\r\n      showNotification('error', 'Failed to load repositories');\r\n    }\r\n  };\r\n\r\n  // Load repository contents\r\n  const loadRepositoryContents = async (repo, path = '', branch = 'main') => {\r\n    if (!octokit || !repo) return;\r\n    \r\n    try {\r\n      const { data: contentsData } = await octokit.repos.getContent({\r\n        owner: repo.owner.login,\r\n        repo: repo.name,\r\n        path: path || '',\r\n        ref: branch\r\n      });\r\n      \r\n      setContents(Array.isArray(contentsData) ? contentsData : [contentsData]);\r\n      setCurrentPath(path || '/');\r\n      \r\n      // Also load branches\r\n      const { data: branchesData } = await octokit.repos.listBranches({\r\n        owner: repo.owner.login,\r\n        repo: repo.name\r\n      });\r\n      \r\n      setBranches(branchesData.map(b => b.name));\r\n      setCurrentBranch(branch);\r\n    } catch (error) {\r\n      console.error('Error loading repository contents:', error);\r\n      showNotification('error', 'Failed to load repository contents');\r\n    }\r\n  };\r\n\r\n  // Handle repository selection\r\n  const handleSelectRepository = async (repo) => {\r\n    setSelectedRepo(repo);\r\n    await loadRepositoryContents(repo);\r\n  };\r\n\r\n  // Handle branch selection\r\n  const handleSelectBranch = async (branch) => {\r\n    if (selectedRepo) {\r\n      await loadRepositoryContents(selectedRepo, currentPath, branch);\r\n    }\r\n  };\r\n\r\n  // Handle directory navigation\r\n  const handleNavigate = async (item) => {\r\n    if (item.type === 'dir') {\r\n      await loadRepositoryContents(selectedRepo, item.path, currentBranch);\r\n    } else {\r\n      // View file content\r\n      try {\r\n        const { data: fileData } = await octokit.repos.getContent({\r\n          owner: selectedRepo.owner.login,\r\n          repo: selectedRepo.name,\r\n          path: item.path,\r\n          ref: currentBranch\r\n        });\r\n        \r\n        // For binary files, fileData.content will be base64 encoded\r\n        // For text files, we can decode and display\r\n        if (fileData.encoding === 'base64' && !isImageFile(fileData.name)) {\r\n          const content = atob(fileData.content);\r\n          // Here you would display the file content in a modal or viewer\r\n          console.log('File content:', content);\r\n          showNotification('info', `Viewing file: ${item.name}`);\r\n        } else if (isImageFile(fileData.name)) {\r\n          // Handle image files\r\n          const imageUrl = `data:image/png;base64,${fileData.content}`;\r\n          // Display image in a modal or viewer\r\n          console.log('Image URL:', imageUrl);\r\n          showNotification('info', `Viewing image: ${item.name}`);\r\n        }\r\n      } catch (error) {\r\n        console.error('Error loading file content:', error);\r\n        showNotification('error', 'Failed to load file content');\r\n      }\r\n    }\r\n  };\r\n\r\n  // Check if file is an image\r\n  const isImageFile = (filename) => {\r\n    const imageExtensions = ['.png', '.jpg', '.jpeg', '.gif', '.svg', '.webp'];\r\n    return imageExtensions.some(ext => filename.toLowerCase().endsWith(ext));\r\n  };\r\n\r\n  // Handle file upload via drag and drop\r\n  // Handle file upload via drag and drop\r\nconst handleDrop = (e) => {\r\n  e.preventDefault();\r\n  e.stopPropagation();\r\n  \r\n  if (!authenticated || !selectedRepo) {\r\n    showNotification('error', 'Please select a repository first');\r\n    return;\r\n  }\r\n  \r\n  const items = e.dataTransfer.items;\r\n  const files = [];\r\n  const folders = new Map(); // Track folders and their files\r\n  \r\n  // Process all items\r\n  const processEntry = async (entry, path = '') => {\r\n    if (entry.isFile) {\r\n      entry.file(file => {\r\n        // Add path information to the file object\r\n        file.relativePath = path ? `${path}/${file.name}` : file.name;\r\n        files.push(file);\r\n      });\r\n    } else if (entry.isDirectory) {\r\n      // Process directory\r\n      const dirReader = entry.createReader();\r\n      const readEntries = () => {\r\n        dirReader.readEntries(entries => {\r\n          if (entries.length > 0) {\r\n            // Process each entry in the directory\r\n            entries.forEach(subEntry => {\r\n              processEntry(subEntry, path ? `${path}/${entry.name}` : entry.name);\r\n            });\r\n            // Continue reading if there are more entries\r\n            readEntries();\r\n          }\r\n        });\r\n      };\r\n      readEntries();\r\n    }\r\n  };\r\n  \r\n  // Process all dropped items\r\n  if (items) {\r\n    for (let i = 0; i < items.length; i++) {\r\n      const item = items[i];\r\n      if (item.kind === 'file') {\r\n        const entry = item.webkitGetAsEntry || item.getAsEntry();\r\n        if (entry) {\r\n          processEntry(entry);\r\n        }\r\n      }\r\n    }\r\n  }\r\n  \r\n  // Wait for all files to be processed\r\n  setTimeout(() => {\r\n    if (files.length > 0) {\r\n      setUploadFiles(files);\r\n      setShowUploadModal(true);\r\n    }\r\n  }, 500);\r\n};\r\n\r\n\r\n  // Handle drag over\r\n  const handleDragOver = (e) => {\r\n    e.preventDefault();\r\n    e.stopPropagation();\r\n  };\r\n\r\n  // Handle file upload and commit\r\n  // Handle file upload and commit\r\nconst handleUploadFiles = async () => {\r\n  if (!commitMessage.trim()) {\r\n    showNotification('error', 'Please enter a commit message');\r\n    return;\r\n  }\r\n  \r\n  try {\r\n    // Get the latest commit SHA for the branch\r\n    const { data: refData } = await octokit.git.getRef({\r\n      owner: selectedRepo.owner.login,\r\n      repo: selectedRepo.name,\r\n      ref: `heads/${currentBranch}`\r\n    });\r\n    \r\n    const latestCommitSha = refData.object.sha;\r\n    \r\n    // Get the base tree\r\n    const { data: commitData } = await octokit.git.getCommit({\r\n      owner: selectedRepo.owner.login,\r\n      repo: selectedRepo.name,\r\n      commit_sha: latestCommitSha\r\n    });\r\n    \r\n    const baseTreeSha = commitData.tree.sha;\r\n    \r\n    // Create blobs for each file\r\n    const fileBlobs = await Promise.all(uploadFiles.map(async (file) => {\r\n      // Read file content\r\n      const content = await readFileAsBase64(file);\r\n      \r\n      // Create blob\r\n      const { data: blobData } = await octokit.git.createBlob({\r\n        owner: selectedRepo.owner.login,\r\n        repo: selectedRepo.name,\r\n        content: content,\r\n        encoding: 'base64'\r\n      });\r\n      \r\n      // Use the relativePath if available (for folders), otherwise use the file name\r\n      const filePath = file.relativePath || \r\n                      (currentPath === '/' ? file.name : `${currentPath}/${file.name}`);\r\n      \r\n      return {\r\n        path: filePath,\r\n        mode: '100644', // Regular file\r\n        type: 'blob',\r\n        sha: blobData.sha\r\n      };\r\n    }));\r\n    \r\n    // Create tree\r\n    const { data: treeData } = await octokit.git.createTree({\r\n      owner: selectedRepo.owner.login,\r\n      repo: selectedRepo.name,\r\n      base_tree: baseTreeSha,\r\n      tree: fileBlobs\r\n    });\r\n    \r\n    // Create commit\r\n    const { data: newCommitData } = await octokit.git.createCommit({\r\n      owner: selectedRepo.owner.login,\r\n      repo: selectedRepo.name,\r\n      message: commitMessage,\r\n      tree: treeData.sha,\r\n      parents: [latestCommitSha]\r\n    });\r\n    \r\n    // Update branch reference\r\n    await octokit.git.updateRef({\r\n      owner: selectedRepo.owner.login,\r\n      repo: selectedRepo.name,\r\n      ref: `heads/${currentBranch}`,\r\n      sha: newCommitData.sha,\r\n      force: true // Add force option to avoid \"not a fast forward\" errors\r\n    });\r\n    \r\n    // Refresh contents\r\n    await loadRepositoryContents(selectedRepo, currentPath, currentBranch);\r\n    \r\n    // Close modal and clear state\r\n    setShowUploadModal(false);\r\n    setUploadFiles([]);\r\n    setCommitMessage('');\r\n    \r\n    showNotification('success', `Successfully uploaded ${uploadFiles.length} file(s)`);\r\n  } catch (error) {\r\n    console.error('Error uploading files:', error);\r\n    showNotification('error', 'Failed to upload files');\r\n  }\r\n};\r\n;\r\n\r\n  // Read file as base64\r\n  // Improved readFileAsBase64 function with better error handling\r\nconst readFileAsBase64 = (file) => {\r\n  return new Promise((resolve, reject) => {\r\n    try {\r\n      const reader = new FileReader();\r\n      \r\n      reader.onload = () => {\r\n        try {\r\n          // Remove the data URL prefix (e.g., \"data:application/pdf;base64,\")\r\n          const base64 = reader.result.split(',')[1];\r\n          resolve(base64);\r\n        } catch (error) {\r\n          console.error('Error processing file data:', error);\r\n          reject(error);\r\n        }\r\n      };\r\n      \r\n      reader.onerror = (error) => {\r\n        console.error('FileReader error:', error);\r\n        reject(error);\r\n      };\r\n      \r\n      // Add a timeout in case the read operation hangs\r\n      setTimeout(() => {\r\n        if (reader.readyState !== 2) {\r\n          reject(new Error('FileReader timeout'));\r\n        }\r\n      }, 10000);\r\n      \r\n      reader.readAsDataURL(file);\r\n    } catch (error) {\r\n      console.error('Error setting up FileReader:', error);\r\n      reject(error);\r\n    }\r\n  });\r\n};\r\n\r\n\r\n  // Show notification\r\n  const showNotification = (type, message) => {\r\n    setNotification({ type, message });\r\n    setTimeout(() => setNotification(null), 5000);\r\n  };\r\n\r\n  // Handle login\r\n  const handleLogin = () => {\r\n    // For demo purposes, we're using a simplified approach\r\n    const token = prompt('Enter your GitHub token:');\r\n    if (token) {\r\n      localStorage.setItem('github_token', token);\r\n      initializeGitHub(token);\r\n    }\r\n  };\r\n\r\n  // Handle logout\r\n  const handleLogout = () => {\r\n    localStorage.removeItem('github_token');\r\n    setAuthenticated(false);\r\n    setUser(null);\r\n    setOctokit(null);\r\n    setRepositories([]);\r\n    setSelectedRepo(null);\r\n    setContents([]);\r\n  };\r\n\r\n  return (\r\n    <AppContainer>\r\n      <Header>\r\n        <Title>Git Helper Web</Title>\r\n        {authenticated ? (\r\n          <UserInfo>\r\n            {user && <UserName>{user.login}</UserName>}\r\n            <LogoutButton onClick={handleLogout}>Logout</LogoutButton>\r\n          </UserInfo>\r\n        ) : (\r\n          <LoginButton onClick={handleLogin}>Login with GitHub</LoginButton>\r\n        )}\r\n      </Header>\r\n\r\n      {authenticated ? (\r\n        <MainContent>\r\n          <Sidebar>\r\n            <SidebarHeader>Repositories</SidebarHeader>\r\n            <RepoList>\r\n              {repositories.map(repo => (\r\n                <RepoItem \r\n                  key={repo.id} \r\n                  selected={selectedRepo && selectedRepo.id === repo.id}\r\n                  onClick={() => handleSelectRepository(repo)}\r\n                >\r\n                  {repo.name}\r\n                </RepoItem>\r\n              ))}\r\n            </RepoList>\r\n          </Sidebar>\r\n\r\n          <Content>\r\n            {selectedRepo ? (\r\n              <>\r\n                <RepositoryHeader>\r\n                  <RepoName>{selectedRepo.name}</RepoName>\r\n                  <BranchSelector>\r\n                    <label>Branch:</label>\r\n                    <select \r\n                      value={currentBranch}\r\n                      onChange={(e) => handleSelectBranch(e.target.value)}\r\n                    >\r\n                      {branches.map(branch => (\r\n                        <option key={branch} value={branch}>{branch}</option>\r\n                      ))}\r\n                    </select>\r\n                  </BranchSelector>\r\n                </RepositoryHeader>\r\n\r\n                <PathNavigator>\r\n                  <PathItem onClick={() => loadRepositoryContents(selectedRepo, '', currentBranch)}>\r\n                    Root\r\n                  </PathItem>\r\n                  {currentPath !== '/' && currentPath.split('/').filter(Boolean).map((part, index, array) => {\r\n                    const path = array.slice(0, index + 1).join('/');\r\n                    return (\r\n                      <React.Fragment key={path}>\r\n                        <PathSeparator>/</PathSeparator>\r\n                        <PathItem onClick={() => loadRepositoryContents(selectedRepo, path, currentBranch)}>\r\n                          {part}\r\n                        </PathItem>\r\n                      </React.Fragment>\r\n                    );\r\n                  })}\r\n                </PathNavigator>\r\n\r\n                <FileExplorer>\r\n                  {contents.map(item => (\r\n                    <FileItem \r\n                      key={item.sha} \r\n                      onClick={() => handleNavigate(item)}\r\n                    >\r\n                      <FileIcon>{item.type === 'dir' ? '📁' : '📄'}</FileIcon>\r\n                      <FileName>{item.name}</FileName>\r\n                    </FileItem>\r\n                  ))}\r\n                </FileExplorer>\r\n\r\n                <DropZone\r\n                  onDragOver={handleDragOver}\r\n                  onDrop={handleDrop}\r\n                >\r\n                  <DropZoneText>Drop files here to upload to current directory</DropZoneText>\r\n                </DropZone>\r\n              </>\r\n            ) : (\r\n              <WelcomeMessage>\r\n                <h2>Select a Repository</h2>\r\n                <p>Choose a repository from the sidebar to get started</p>\r\n              </WelcomeMessage>\r\n            )}\r\n          </Content>\r\n        </MainContent>\r\n      ) : (\r\n        <WelcomeMessage>\r\n          <h2>Welcome to Git Helper Web</h2>\r\n          <p>Please login with GitHub to get started</p>\r\n          <LoginButton onClick={handleLogin}>Login with GitHub</LoginButton>\r\n        </WelcomeMessage>\r\n      )}\r\n\r\n      {notification && (\r\n        <Notification type={notification.type}>\r\n          {notification.message}\r\n        </Notification>\r\n      )}\r\n\r\n      {showUploadModal && (\r\n        <Modal>\r\n          <ModalContent>\r\n            <ModalHeader>\r\n              <h3>Upload Files</h3>\r\n              <CloseButton onClick={() => setShowUploadModal(false)}>×</CloseButton>\r\n            </ModalHeader>\r\n            <ModalBody>\r\n              <h4>Files to upload:</h4>\r\n              <FileList>\r\n                {uploadFiles.map((file, index) => (\r\n                  <FileListItem key={index}>\r\n                    {file.name} ({(file.size / 1024).toFixed(2)} KB)\r\n                  </FileListItem>\r\n                ))}\r\n              </FileList>\r\n              <CommitMessageInput>\r\n                <label>Commit message:</label>\r\n                <textarea\r\n                  value={commitMessage}\r\n                  onChange={(e) => setCommitMessage(e.target.value)}\r\n                  placeholder=\"Enter commit message...\"\r\n                />\r\n              </CommitMessageInput>\r\n            </ModalBody>\r\n            <ModalFooter>\r\n              <CancelButton onClick={() => setShowUploadModal(false)}>Cancel</CancelButton>\r\n              <UploadButton onClick={handleUploadFiles}>Commit Changes</UploadButton>\r\n            </ModalFooter>\r\n          </ModalContent>\r\n        </Modal>\r\n      )}\r\n    </AppContainer>\r\n  );\r\n};\r\n\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}