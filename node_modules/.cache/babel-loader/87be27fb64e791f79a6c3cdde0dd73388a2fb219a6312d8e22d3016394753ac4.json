{"ast":null,"code":"import React,{useState,useEffect}from'react';import{Octokit}from'@octokit/rest';import{AppContainer,Header,Title,UserInfo,UserName,LoginButton,LogoutButton,MainContent,Sidebar,SidebarHeader,RepoList,RepoItem,Content,RepositoryHeader,RepoName,BranchSelector,PathNavigator,PathItem,PathSeparator,FileExplorer,FileItem,FileIcon,FileName,DropZone,DropZoneText,WelcomeMessage,Notification,Modal,ModalContent,ModalHeader,CloseButton,ModalBody,FileList,FileListItem,CommitMessageInput,ModalFooter,CancelButton,UploadButton}from'./styles/StyledComponents';// GitHub OAuth App credentials would normally be stored securely\n// For demo purposes, we're using placeholder values\nimport{jsx as _jsx,jsxs as _jsxs,Fragment as _Fragment}from\"react/jsx-runtime\";const GITHUB_CLIENT_ID='Ov23liar9wjLDWrJz1Lx';const GITHUB_CLIENT_SECRET='501fe2d9197171e5130909d0794f1eb08d57298f';// Constants for file handling\nconst MAX_FILE_SIZE=2*1024*1024*1024;// 2GB per file (increased from 25MB)\nconst GITHUB_BLOB_LIMIT=100*1024*1024;// 100MB GitHub API limit\nconst CHUNK_SIZE=50*1024*1024;// 50MB chunks for large file processing\nconst App=()=>{// State variables\nconst[authenticated,setAuthenticated]=useState(false);const[octokit,setOctokit]=useState(null);const[user,setUser]=useState(null);const[repositories,setRepositories]=useState([]);const[selectedRepo,setSelectedRepo]=useState(null);const[currentPath,setCurrentPath]=useState('');const[contents,setContents]=useState([]);const[branches,setBranches]=useState([]);const[currentBranch,setCurrentBranch]=useState('main');const[commitMessage,setCommitMessage]=useState('');const[notification,setNotification]=useState(null);const[uploadFiles,setUploadFiles]=useState([]);const[showUploadModal,setShowUploadModal]=useState(false);const[uploadProgress,setUploadProgress]=useState(0);const[isUploading,setIsUploading]=useState(false);// Initialize GitHub on component mount\nuseEffect(()=>{// Check if we have a token in localStorage\nconst token=localStorage.getItem('github_token');if(token){initializeGitHub(token);}},[]);// Initialize GitHub with token\nconst initializeGitHub=async token=>{try{const octokitInstance=new Octokit({auth:token});setOctokit(octokitInstance);// Get authenticated user\nconst{data:userData}=await octokitInstance.users.getAuthenticated();setUser(userData);setAuthenticated(true);// Load user repositories\nawait loadUserRepositories(octokitInstance);showNotification('success',\"Logged in as \".concat(userData.login));}catch(error){console.error('Authentication error:',error);localStorage.removeItem('github_token');setAuthenticated(false);showNotification('error','Authentication failed');}};// Load user repositories\nconst loadUserRepositories=async octokitInstance=>{try{const{data:repos}=await octokitInstance.repos.listForAuthenticatedUser({sort:'updated',per_page:100});setRepositories(repos);}catch(error){console.error('Error loading repositories:',error);showNotification('error','Failed to load repositories');}};// Utility function to normalize paths\nconst normalizePath=path=>{if(!path||path==='/')return'';// Remove leading and trailing slashes, then ensure no double slashes\nconst normalized=path.replace(/^\\/+|\\/+$/g,'').replace(/\\/+/g,'/');return normalized;};// Utility function to join paths properly\nconst joinPaths=function(){for(var _len=arguments.length,paths=new Array(_len),_key=0;_key<_len;_key++){paths[_key]=arguments[_key];}const filtered=paths.filter(p=>p&&p!=='/');if(filtered.length===0)return'';const joined=filtered.join('/').replace(/\\/+/g,'/');return normalizePath(joined);};// Load repository contents with improved path handling\nconst loadRepositoryContents=async function(repo){let path=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'';let branch=arguments.length>2?arguments[2]:undefined;if(!octokit||!repo)return;try{// Use provided branch OR fall back to repo's default branch\nconst targetBranch=branch||repo.default_branch;// Clear existing contents first to ensure UI updates\nsetContents([]);// Normalize the path to prevent malformed path errors\nconst normalizedPath=normalizePath(path);console.log(\"Loading contents for path: \".concat(normalizedPath,\" on branch: \").concat(targetBranch));const{data:contentsData}=await octokit.repos.getContent({owner:repo.owner.login,repo:repo.name,path:normalizedPath,ref:targetBranch,headers:{'If-None-Match':''// Prevents caching\n}});setContents(Array.isArray(contentsData)?contentsData:[contentsData]);setCurrentPath(normalizedPath);// Also load branches\nconst{data:branchesData}=await octokit.repos.listBranches({owner:repo.owner.login,repo:repo.name});setBranches(branchesData.map(b=>b.name));setCurrentBranch(targetBranch);return true;// Indicate successful loading\n}catch(error){console.error('Error loading repository contents:',error);if(error.status===404){showNotification('error','Path not found in repository');}else if(error.status===403){showNotification('error','Access denied - check repository permissions');}else{showNotification('error',\"Failed to load repository contents: \".concat(error.message));}return false;}};// Handle repository selection\nconst handleSelectRepository=async repo=>{setSelectedRepo(repo);await loadRepositoryContents(repo);};// Handle branch selection\nconst handleSelectBranch=async branch=>{if(selectedRepo){await loadRepositoryContents(selectedRepo,currentPath,branch);}};// Handle directory navigation\nconst handleNavigate=async item=>{if(item.type==='dir'){await loadRepositoryContents(selectedRepo,item.path,currentBranch);}else{// View file content\ntry{const{data:fileData}=await octokit.repos.getContent({owner:selectedRepo.owner.login,repo:selectedRepo.name,path:item.path,ref:currentBranch});// For binary files, fileData.content will be base64 encoded\n// For text files, we can decode and display\nif(fileData.encoding==='base64'&&!isImageFile(fileData.name)){const content=atob(fileData.content);// Here you would display the file content in a modal or viewer\nconsole.log('File content:',content);showNotification('info',\"Viewing file: \".concat(item.name));}else if(isImageFile(fileData.name)){// Handle image files\nconst imageUrl=\"data:image/png;base64,\".concat(fileData.content);// Display image in a modal or viewer\nconsole.log('Image URL:',imageUrl);showNotification('info',\"Viewing image: \".concat(item.name));}}catch(error){console.error('Error loading file content:',error);showNotification('error','Failed to load file content');}}};// Check if file is an image\nconst isImageFile=filename=>{const imageExtensions=['.png','.jpg','.jpeg','.gif','.svg','.webp'];return imageExtensions.some(ext=>filename.toLowerCase().endsWith(ext));};// Check if file needs Git LFS (Large File Storage)\nconst needsLFS=file=>{return file.size>GITHUB_BLOB_LIMIT;};// Generate LFS pointer content\nconst generateLFSPointer=(file,sha256Hash)=>{return\"version https://git-lfs.github.com/spec/v1\\noid sha256:\".concat(sha256Hash,\"\\nsize \").concat(file.size,\"\\n\");};// Calculate SHA256 hash for LFS\nconst calculateSHA256=async file=>{const arrayBuffer=await file.arrayBuffer();const hashBuffer=await crypto.subtle.digest('SHA-256',arrayBuffer);const hashArray=Array.from(new Uint8Array(hashBuffer));return hashArray.map(b=>b.toString(16).padStart(2,'0')).join('');};// Validate file before upload\nconst validateFile=file=>{const errors=[];// Check file size (now supports up to 2GB)\nif(file.size>MAX_FILE_SIZE){errors.push(\"File \\\"\".concat(file.name,\"\\\" is too large (\").concat((file.size/1024/1024/1024).toFixed(2),\"GB). Maximum size is \").concat(MAX_FILE_SIZE/1024/1024/1024,\"GB.\"));}// Check for invalid characters in filename\nconst invalidChars=/[<>:\"|?*\\x00-\\x1f]/;if(invalidChars.test(file.name)){errors.push(\"File \\\"\".concat(file.name,\"\\\" contains invalid characters.\"));}// Warn about large files that will use LFS\nif(needsLFS(file)){console.log(\"File \\\"\".concat(file.name,\"\\\" (\").concat((file.size/1024/1024).toFixed(2),\"MB) will be stored using Git LFS.\"));}return errors;};// Handle file upload via drag and drop\nconst handleDrop=e=>{e.preventDefault();e.stopPropagation();if(!authenticated||!selectedRepo){showNotification('error','Please select a repository first');return;}const files=[];const errors=[];if(e.dataTransfer.items){for(let i=0;i<e.dataTransfer.items.length;i++){if(e.dataTransfer.items[i].kind==='file'){const file=e.dataTransfer.items[i].getAsFile();const fileErrors=validateFile(file);if(fileErrors.length>0){errors.push(...fileErrors);}else{files.push(file);}}}}else{for(let i=0;i<e.dataTransfer.files.length;i++){const file=e.dataTransfer.files[i];const fileErrors=validateFile(file);if(fileErrors.length>0){errors.push(...fileErrors);}else{files.push(file);}}}if(errors.length>0){showNotification('error',errors.join(' '));return;}if(files.length>0){setUploadFiles(files);setShowUploadModal(true);}};// Handle drag over\nconst handleDragOver=e=>{e.preventDefault();e.stopPropagation();};// Improved file reading with chunked processing for large files\nconst readFileAsBase64=file=>{return new Promise((resolve,reject)=>{try{const reader=new FileReader();reader.onload=()=>{try{// Remove the data URL prefix (e.g., \"data:application/pdf;base64,\")\nconst base64=reader.result.split(',')[1];resolve(base64);}catch(error){console.error('Error processing file data:',error);reject(error);}};reader.onerror=error=>{console.error('FileReader error:',error);reject(error);};// Add a timeout for large files\nconst timeout=Math.max(30000,file.size/1024);// 30s minimum, 1s per KB\nsetTimeout(()=>{if(reader.readyState!==2){reader.abort();reject(new Error('FileReader timeout - file may be too large'));}},timeout);reader.readAsDataURL(file);}catch(error){console.error('Error setting up FileReader:',error);reject(error);}});};// Handle file upload and commit with improved error handling and LFS support\nconst handleUploadFiles=async()=>{if(!commitMessage.trim()){showNotification('error','Please enter a commit message');return;}setIsUploading(true);setUploadProgress(0);try{// Get the latest commit SHA for the branch\nconst{data:refData}=await octokit.git.getRef({owner:selectedRepo.owner.login,repo:selectedRepo.name,ref:\"heads/\".concat(currentBranch)});const latestCommitSha=refData.object.sha;// Get the base tree\nconst{data:commitData}=await octokit.git.getCommit({owner:selectedRepo.owner.login,repo:selectedRepo.name,commit_sha:latestCommitSha});const baseTreeSha=commitData.tree.sha;// Create blobs for each file with progress tracking and LFS support\nconst fileBlobs=[];for(let i=0;i<uploadFiles.length;i++){const file=uploadFiles[i];try{// Update progress\nsetUploadProgress((i+0.5)/uploadFiles.length*100);let blobSha;if(needsLFS(file)){// Handle large files with Git LFS\nshowNotification('info',\"Processing large file \\\"\".concat(file.name,\"\\\" with Git LFS...\"));// Calculate SHA256 hash for LFS\nconst sha256Hash=await calculateSHA256(file);// Create LFS pointer content\nconst lfsPointer=generateLFSPointer(file,sha256Hash);// Create blob with LFS pointer content\nconst{data:blobData}=await octokit.git.createBlob({owner:selectedRepo.owner.login,repo:selectedRepo.name,content:btoa(lfsPointer),// Base64 encode the LFS pointer\nencoding:'base64'});blobSha=blobData.sha;// Note: In a real implementation, you would also need to:\n// 1. Upload the actual file to LFS storage\n// 2. Ensure the repository has LFS enabled\n// For this demo, we're creating the LFS pointer file\n}else{// Handle normal files (under 100MB)\nconst content=await readFileAsBase64(file);// Create blob\nconst{data:blobData}=await octokit.git.createBlob({owner:selectedRepo.owner.login,repo:selectedRepo.name,content:content,encoding:'base64'});blobSha=blobData.sha;}// Construct proper file path\nconst filePath=joinPaths(currentPath,file.name);fileBlobs.push({path:filePath,mode:'100644',// Regular file\ntype:'blob',sha:blobSha});// Update progress\nsetUploadProgress((i+1)/uploadFiles.length*100);}catch(error){console.error(\"Error processing file \".concat(file.name,\":\"),error);throw new Error(\"Failed to process file \\\"\".concat(file.name,\"\\\": \").concat(error.message));}}// Create tree\nconst{data:treeData}=await octokit.git.createTree({owner:selectedRepo.owner.login,repo:selectedRepo.name,base_tree:baseTreeSha,tree:fileBlobs});// Create commit\nconst{data:newCommitData}=await octokit.git.createCommit({owner:selectedRepo.owner.login,repo:selectedRepo.name,message:commitMessage,tree:treeData.sha,parents:[latestCommitSha]});// Update branch reference\nawait octokit.git.updateRef({owner:selectedRepo.owner.login,repo:selectedRepo.name,ref:\"heads/\".concat(currentBranch),sha:newCommitData.sha,force:true});// Refresh contents with retry logic\nsetTimeout(async()=>{const success=await loadRepositoryContents(selectedRepo,currentPath,currentBranch);if(!success){// Try one more time if the first attempt fails\nsetTimeout(()=>{loadRepositoryContents(selectedRepo,currentPath,currentBranch);},1000);}},500);// Close modal and clear state\nsetShowUploadModal(false);setUploadFiles([]);setCommitMessage('');setUploadProgress(0);const largeFiles=uploadFiles.filter(needsLFS);const regularFiles=uploadFiles.filter(f=>!needsLFS(f));let successMessage=\"Successfully uploaded \".concat(uploadFiles.length,\" file(s)\");if(largeFiles.length>0){successMessage+=\" (\".concat(largeFiles.length,\" large file(s) stored with Git LFS)\");}showNotification('success',successMessage);}catch(error){console.error('Error uploading files:',error);// Provide more specific error messages\nif(error.message.includes('too large')){showNotification('error','One or more files are too large. Please use files smaller than 2GB.');}else if(error.message.includes('malformed')){showNotification('error','Invalid file path. Please check file names for special characters.');}else{showNotification('error',\"Upload failed: \".concat(error.message));}}finally{setIsUploading(false);setUploadProgress(0);}};// Show notification\nconst showNotification=(type,message)=>{setNotification({type,message});setTimeout(()=>setNotification(null),5000);};// Handle login\nconst handleLogin=()=>{// For demo purposes, we're using a simplified approach\nconst token=prompt('Enter your GitHub token:');if(token){localStorage.setItem('github_token',token);initializeGitHub(token);}};// Handle logout\nconst handleLogout=()=>{localStorage.removeItem('github_token');setAuthenticated(false);setUser(null);setOctokit(null);setRepositories([]);setSelectedRepo(null);setContents([]);};return/*#__PURE__*/_jsxs(AppContainer,{children:[/*#__PURE__*/_jsxs(Header,{children:[/*#__PURE__*/_jsx(Title,{children:\"Git Helper Web - Fixed Version\"}),authenticated?/*#__PURE__*/_jsxs(UserInfo,{children:[user&&/*#__PURE__*/_jsx(UserName,{children:user.login}),/*#__PURE__*/_jsx(LogoutButton,{onClick:handleLogout,children:\"Logout\"})]}):/*#__PURE__*/_jsx(LoginButton,{onClick:handleLogin,children:\"Login with GitHub\"})]}),authenticated?/*#__PURE__*/_jsxs(MainContent,{children:[/*#__PURE__*/_jsxs(Sidebar,{children:[/*#__PURE__*/_jsx(SidebarHeader,{children:\"Repositories\"}),/*#__PURE__*/_jsx(RepoList,{children:repositories.map(repo=>/*#__PURE__*/_jsx(RepoItem,{selected:selectedRepo&&selectedRepo.id===repo.id,onClick:()=>handleSelectRepository(repo),children:repo.name},repo.id))})]}),/*#__PURE__*/_jsx(Content,{children:selectedRepo?/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsxs(RepositoryHeader,{style:{display:\"flex\",flexWrap:'wrap'},children:[/*#__PURE__*/_jsx(RepoName,{children:selectedRepo.name}),/*#__PURE__*/_jsxs(BranchSelector,{children:[/*#__PURE__*/_jsx(\"label\",{children:\"Branch:\"}),/*#__PURE__*/_jsx(\"select\",{value:currentBranch,onChange:e=>handleSelectBranch(e.target.value),style:{width:\"100%\",maxWidth:500},children:branches.map(branch=>/*#__PURE__*/_jsx(\"option\",{value:branch,children:branch},branch))})]})]}),/*#__PURE__*/_jsxs(PathNavigator,{children:[/*#__PURE__*/_jsx(PathItem,{onClick:()=>loadRepositoryContents(selectedRepo,'',currentBranch),children:\"Root\"}),currentPath&&currentPath.split('/').filter(Boolean).map((part,index,array)=>{const path=array.slice(0,index+1).join('/');return/*#__PURE__*/_jsxs(React.Fragment,{children:[/*#__PURE__*/_jsx(PathSeparator,{children:\"/\"}),/*#__PURE__*/_jsx(PathItem,{onClick:()=>loadRepositoryContents(selectedRepo,path,currentBranch),children:part})]},path);})]}),/*#__PURE__*/_jsx(FileExplorer,{children:contents.map(item=>/*#__PURE__*/_jsxs(FileItem,{onClick:()=>handleNavigate(item),children:[/*#__PURE__*/_jsx(FileIcon,{children:item.type==='dir'?'📁':'📄'}),/*#__PURE__*/_jsx(FileName,{children:item.name})]},item.sha))}),/*#__PURE__*/_jsx(DropZone,{onDragOver:handleDragOver,onDrop:handleDrop,children:/*#__PURE__*/_jsxs(DropZoneText,{children:[\"Drop files here to upload to current directory\",/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsxs(\"small\",{children:[\"Maximum file size: \",MAX_FILE_SIZE/1024/1024/1024,\"GB per file (Large files use Git LFS)\"]})]})})]}):/*#__PURE__*/_jsxs(WelcomeMessage,{children:[/*#__PURE__*/_jsx(\"h2\",{children:\"Select a Repository\"}),/*#__PURE__*/_jsx(\"p\",{children:\"Choose a repository from the sidebar to get started\"})]})})]}):/*#__PURE__*/_jsxs(WelcomeMessage,{children:[/*#__PURE__*/_jsx(\"h2\",{children:\"Welcome to Git Helper Web - Fixed Version\"}),/*#__PURE__*/_jsx(\"p\",{children:\"Please login with GitHub to get started\"}),/*#__PURE__*/_jsx(LoginButton,{onClick:handleLogin,children:\"Login with GitHub\"})]}),notification&&/*#__PURE__*/_jsx(Notification,{type:notification.type,children:notification.message}),showUploadModal&&/*#__PURE__*/_jsx(Modal,{children:/*#__PURE__*/_jsxs(ModalContent,{children:[/*#__PURE__*/_jsxs(ModalHeader,{children:[/*#__PURE__*/_jsx(\"h3\",{children:\"Upload Files\"}),/*#__PURE__*/_jsx(CloseButton,{onClick:()=>setShowUploadModal(false),children:\"\\xD7\"})]}),/*#__PURE__*/_jsxs(ModalBody,{children:[/*#__PURE__*/_jsx(\"h4\",{children:\"Files to upload:\"}),/*#__PURE__*/_jsx(FileList,{children:uploadFiles.map((file,index)=>{const sizeInMB=file.size/1024/1024;const sizeInGB=file.size/1024/1024/1024;const displaySize=sizeInGB>=1?\"\".concat(sizeInGB.toFixed(2),\" GB\"):\"\".concat(sizeInMB.toFixed(2),\" MB\");const isLFS=needsLFS(file);return/*#__PURE__*/_jsxs(FileListItem,{children:[file.name,\" (\",displaySize,\")\",isLFS&&' - Will use Git LFS']},index);})}),isUploading&&/*#__PURE__*/_jsxs(\"div\",{style:{marginBottom:'20px'},children:[/*#__PURE__*/_jsxs(\"div\",{style:{marginBottom:'8px'},children:[\"Upload Progress: \",uploadProgress.toFixed(0),\"%\"]}),/*#__PURE__*/_jsx(\"div\",{style:{width:'100%',height:'8px',backgroundColor:'#21262d',borderRadius:'4px',overflow:'hidden'},children:/*#__PURE__*/_jsx(\"div\",{style:{width:\"\".concat(uploadProgress,\"%\"),height:'100%',backgroundColor:'#2ea043',transition:'width 0.3s ease'}})})]}),/*#__PURE__*/_jsxs(CommitMessageInput,{children:[/*#__PURE__*/_jsx(\"label\",{children:\"Commit message:\"}),/*#__PURE__*/_jsx(\"textarea\",{value:commitMessage,onChange:e=>setCommitMessage(e.target.value),placeholder:\"Enter commit message...\",disabled:isUploading})]})]}),/*#__PURE__*/_jsxs(ModalFooter,{children:[/*#__PURE__*/_jsx(CancelButton,{onClick:()=>setShowUploadModal(false),disabled:isUploading,children:\"Cancel\"}),/*#__PURE__*/_jsx(UploadButton,{onClick:handleUploadFiles,disabled:isUploading,children:isUploading?'Uploading...':'Commit Changes'})]})]})})]});};export default App;","map":{"version":3,"names":["React","useState","useEffect","Octokit","AppContainer","Header","Title","UserInfo","UserName","LoginButton","LogoutButton","MainContent","Sidebar","SidebarHeader","RepoList","RepoItem","Content","RepositoryHeader","RepoName","BranchSelector","PathNavigator","PathItem","PathSeparator","FileExplorer","FileItem","FileIcon","FileName","DropZone","DropZoneText","WelcomeMessage","Notification","Modal","ModalContent","ModalHeader","CloseButton","ModalBody","FileList","FileListItem","CommitMessageInput","ModalFooter","CancelButton","UploadButton","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","GITHUB_CLIENT_ID","GITHUB_CLIENT_SECRET","MAX_FILE_SIZE","GITHUB_BLOB_LIMIT","CHUNK_SIZE","App","authenticated","setAuthenticated","octokit","setOctokit","user","setUser","repositories","setRepositories","selectedRepo","setSelectedRepo","currentPath","setCurrentPath","contents","setContents","branches","setBranches","currentBranch","setCurrentBranch","commitMessage","setCommitMessage","notification","setNotification","uploadFiles","setUploadFiles","showUploadModal","setShowUploadModal","uploadProgress","setUploadProgress","isUploading","setIsUploading","token","localStorage","getItem","initializeGitHub","octokitInstance","auth","data","userData","users","getAuthenticated","loadUserRepositories","showNotification","concat","login","error","console","removeItem","repos","listForAuthenticatedUser","sort","per_page","normalizePath","path","normalized","replace","joinPaths","_len","arguments","length","paths","Array","_key","filtered","filter","p","joined","join","loadRepositoryContents","repo","undefined","branch","targetBranch","default_branch","normalizedPath","log","contentsData","getContent","owner","name","ref","headers","isArray","branchesData","listBranches","map","b","status","message","handleSelectRepository","handleSelectBranch","handleNavigate","item","type","fileData","encoding","isImageFile","content","atob","imageUrl","filename","imageExtensions","some","ext","toLowerCase","endsWith","needsLFS","file","size","generateLFSPointer","sha256Hash","calculateSHA256","arrayBuffer","hashBuffer","crypto","subtle","digest","hashArray","from","Uint8Array","toString","padStart","validateFile","errors","push","toFixed","invalidChars","test","handleDrop","e","preventDefault","stopPropagation","files","dataTransfer","items","i","kind","getAsFile","fileErrors","handleDragOver","readFileAsBase64","Promise","resolve","reject","reader","FileReader","onload","base64","result","split","onerror","timeout","Math","max","setTimeout","readyState","abort","Error","readAsDataURL","handleUploadFiles","trim","refData","git","getRef","latestCommitSha","object","sha","commitData","getCommit","commit_sha","baseTreeSha","tree","fileBlobs","blobSha","lfsPointer","blobData","createBlob","btoa","filePath","mode","treeData","createTree","base_tree","newCommitData","createCommit","parents","updateRef","force","success","largeFiles","regularFiles","f","successMessage","includes","handleLogin","prompt","setItem","handleLogout","children","onClick","selected","id","style","display","flexWrap","value","onChange","target","width","maxWidth","Boolean","part","index","array","slice","onDragOver","onDrop","sizeInMB","sizeInGB","displaySize","isLFS","marginBottom","height","backgroundColor","borderRadius","overflow","transition","placeholder","disabled"],"sources":["/Users/zainali/web/039-GitHelper/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Octokit } from '@octokit/rest';\nimport {\n  AppContainer,\n  Header,\n  Title,\n  UserInfo,\n  UserName,\n  LoginButton,\n  LogoutButton,\n  MainContent,\n  Sidebar,\n  SidebarHeader,\n  RepoList,\n  RepoItem,\n  Content,\n  RepositoryHeader,\n  RepoName,\n  BranchSelector,\n  PathNavigator,\n  PathItem,\n  PathSeparator,\n  FileExplorer,\n  FileItem,\n  FileIcon,\n  FileName,\n  DropZone,\n  DropZoneText,\n  WelcomeMessage,\n  Notification,\n  Modal,\n  ModalContent,\n  ModalHeader,\n  CloseButton,\n  ModalBody,\n  FileList,\n  FileListItem,\n  CommitMessageInput,\n  ModalFooter,\n  CancelButton,\n  UploadButton\n} from './styles/StyledComponents';\n\n// GitHub OAuth App credentials would normally be stored securely\n// For demo purposes, we're using placeholder values\nconst GITHUB_CLIENT_ID = 'Ov23liar9wjLDWrJz1Lx';\nconst GITHUB_CLIENT_SECRET = '501fe2d9197171e5130909d0794f1eb08d57298f';\n\n// Constants for file handling\nconst MAX_FILE_SIZE = 2 * 1024 * 1024 * 1024; // 2GB per file (increased from 25MB)\nconst GITHUB_BLOB_LIMIT = 100 * 1024 * 1024; // 100MB GitHub API limit\nconst CHUNK_SIZE = 50 * 1024 * 1024; // 50MB chunks for large file processing\n\n\n\nconst App = () => {\n  // State variables\n  const [authenticated, setAuthenticated] = useState(false);\n  const [octokit, setOctokit] = useState(null);\n  const [user, setUser] = useState(null);\n  const [repositories, setRepositories] = useState([]);\n  const [selectedRepo, setSelectedRepo] = useState(null);\n  const [currentPath, setCurrentPath] = useState('');\n  const [contents, setContents] = useState([]);\n  const [branches, setBranches] = useState([]);\n  const [currentBranch, setCurrentBranch] = useState('main');\n  const [commitMessage, setCommitMessage] = useState('');\n  const [notification, setNotification] = useState(null);\n  const [uploadFiles, setUploadFiles] = useState([]);\n  const [showUploadModal, setShowUploadModal] = useState(false);\n  const [uploadProgress, setUploadProgress] = useState(0);\n  const [isUploading, setIsUploading] = useState(false);\n\n  // Initialize GitHub on component mount\n  useEffect(() => {\n    // Check if we have a token in localStorage\n    const token = localStorage.getItem('github_token');\n\n    if (token) {\n      initializeGitHub(token);\n    }\n  }, []);\n\n  // Initialize GitHub with token\n  const initializeGitHub = async (token) => {\n    try {\n      const octokitInstance = new Octokit({\n        auth: token\n      });\n\n      setOctokit(octokitInstance);\n\n      // Get authenticated user\n      const { data: userData } = await octokitInstance.users.getAuthenticated();\n      setUser(userData);\n      setAuthenticated(true);\n\n      // Load user repositories\n      await loadUserRepositories(octokitInstance);\n\n      showNotification('success', `Logged in as ${userData.login}`);\n    } catch (error) {\n      console.error('Authentication error:', error);\n      localStorage.removeItem('github_token');\n      setAuthenticated(false);\n      showNotification('error', 'Authentication failed');\n    }\n  };\n\n  // Load user repositories\n  const loadUserRepositories = async (octokitInstance) => {\n    try {\n      const { data: repos } = await octokitInstance.repos.listForAuthenticatedUser({\n        sort: 'updated',\n        per_page: 100\n      });\n      setRepositories(repos);\n    } catch (error) {\n      console.error('Error loading repositories:', error);\n      showNotification('error', 'Failed to load repositories');\n    }\n  };\n\n  // Utility function to normalize paths\n  const normalizePath = (path) => {\n    if (!path || path === '/') return '';\n\n    // Remove leading and trailing slashes, then ensure no double slashes\n    const normalized = path.replace(/^\\/+|\\/+$/g, '').replace(/\\/+/g, '/');\n    return normalized;\n  };\n\n  // Utility function to join paths properly\n  const joinPaths = (...paths) => {\n    const filtered = paths.filter(p => p && p !== '/');\n    if (filtered.length === 0) return '';\n\n    const joined = filtered.join('/').replace(/\\/+/g, '/');\n    return normalizePath(joined);\n  };\n\n  // Load repository contents with improved path handling\n  const loadRepositoryContents = async (repo, path = '', branch) => {\n    if (!octokit || !repo) return;\n\n    try {\n      // Use provided branch OR fall back to repo's default branch\n      const targetBranch = branch || repo.default_branch;\n\n      // Clear existing contents first to ensure UI updates\n      setContents([]);\n\n      // Normalize the path to prevent malformed path errors\n      const normalizedPath = normalizePath(path);\n\n      console.log(`Loading contents for path: ${normalizedPath} on branch: ${targetBranch}`);\n\n      const { data: contentsData } = await octokit.repos.getContent({\n        owner: repo.owner.login,\n        repo: repo.name,\n        path: normalizedPath,\n        ref: targetBranch,\n        headers: {\n          'If-None-Match': '' // Prevents caching\n        }\n      });\n\n      setContents(Array.isArray(contentsData) ? contentsData : [contentsData]);\n      setCurrentPath(normalizedPath);\n\n      // Also load branches\n      const { data: branchesData } = await octokit.repos.listBranches({\n        owner: repo.owner.login,\n        repo: repo.name\n      });\n\n      setBranches(branchesData.map(b => b.name));\n      setCurrentBranch(targetBranch);\n\n      return true; // Indicate successful loading\n    } catch (error) {\n      console.error('Error loading repository contents:', error);\n\n      if (error.status === 404) {\n        showNotification('error', 'Path not found in repository');\n      } else if (error.status === 403) {\n        showNotification('error', 'Access denied - check repository permissions');\n      } else {\n        showNotification('error', `Failed to load repository contents: ${error.message}`);\n      }\n      return false;\n    }\n  };\n\n\n  // Handle repository selection\n  const handleSelectRepository = async (repo) => {\n    setSelectedRepo(repo);\n    await loadRepositoryContents(repo);\n  };\n\n  // Handle branch selection\n  const handleSelectBranch = async (branch) => {\n    if (selectedRepo) {\n      await loadRepositoryContents(selectedRepo, currentPath, branch);\n    }\n  };\n\n  // Handle directory navigation\n  const handleNavigate = async (item) => {\n    if (item.type === 'dir') {\n      await loadRepositoryContents(selectedRepo, item.path, currentBranch);\n    } else {\n      // View file content\n      try {\n        const { data: fileData } = await octokit.repos.getContent({\n          owner: selectedRepo.owner.login,\n          repo: selectedRepo.name,\n          path: item.path,\n          ref: currentBranch\n        });\n\n        // For binary files, fileData.content will be base64 encoded\n        // For text files, we can decode and display\n        if (fileData.encoding === 'base64' && !isImageFile(fileData.name)) {\n          const content = atob(fileData.content);\n          // Here you would display the file content in a modal or viewer\n          console.log('File content:', content);\n          showNotification('info', `Viewing file: ${item.name}`);\n        } else if (isImageFile(fileData.name)) {\n          // Handle image files\n          const imageUrl = `data:image/png;base64,${fileData.content}`;\n          // Display image in a modal or viewer\n          console.log('Image URL:', imageUrl);\n          showNotification('info', `Viewing image: ${item.name}`);\n        }\n      } catch (error) {\n        console.error('Error loading file content:', error);\n        showNotification('error', 'Failed to load file content');\n      }\n    }\n  };\n\n  // Check if file is an image\n  const isImageFile = (filename) => {\n    const imageExtensions = ['.png', '.jpg', '.jpeg', '.gif', '.svg', '.webp'];\n    return imageExtensions.some(ext => filename.toLowerCase().endsWith(ext));\n  };\n\n  // Check if file needs Git LFS (Large File Storage)\n  const needsLFS = (file) => {\n    return file.size > GITHUB_BLOB_LIMIT;\n  };\n\n  // Generate LFS pointer content\n  const generateLFSPointer = (file, sha256Hash) => {\n    return `version https://git-lfs.github.com/spec/v1\noid sha256:${sha256Hash}\nsize ${file.size}\n`;\n  };\n\n  // Calculate SHA256 hash for LFS\n  const calculateSHA256 = async (file) => {\n    const arrayBuffer = await file.arrayBuffer();\n    const hashBuffer = await crypto.subtle.digest('SHA-256', arrayBuffer);\n    const hashArray = Array.from(new Uint8Array(hashBuffer));\n    return hashArray.map(b => b.toString(16).padStart(2, '0')).join('');\n  };\n\n  // Validate file before upload\n  const validateFile = (file) => {\n    const errors = [];\n\n    // Check file size (now supports up to 2GB)\n    if (file.size > MAX_FILE_SIZE) {\n      errors.push(`File \"${file.name}\" is too large (${(file.size / 1024 / 1024 / 1024).toFixed(2)}GB). Maximum size is ${MAX_FILE_SIZE / 1024 / 1024 / 1024}GB.`);\n    }\n\n    // Check for invalid characters in filename\n    const invalidChars = /[<>:\"|?*\\x00-\\x1f]/;\n    if (invalidChars.test(file.name)) {\n      errors.push(`File \"${file.name}\" contains invalid characters.`);\n    }\n\n    // Warn about large files that will use LFS\n    if (needsLFS(file)) {\n      console.log(`File \"${file.name}\" (${(file.size / 1024 / 1024).toFixed(2)}MB) will be stored using Git LFS.`);\n    }\n\n    return errors;\n  };\n\n  // Handle file upload via drag and drop\n  const handleDrop = (e) => {\n    e.preventDefault();\n    e.stopPropagation();\n\n    if (!authenticated || !selectedRepo) {\n      showNotification('error', 'Please select a repository first');\n      return;\n    }\n\n    const files = [];\n    const errors = [];\n\n    if (e.dataTransfer.items) {\n      for (let i = 0; i < e.dataTransfer.items.length; i++) {\n        if (e.dataTransfer.items[i].kind === 'file') {\n          const file = e.dataTransfer.items[i].getAsFile();\n          const fileErrors = validateFile(file);\n\n          if (fileErrors.length > 0) {\n            errors.push(...fileErrors);\n          } else {\n            files.push(file);\n          }\n        }\n      }\n    } else {\n      for (let i = 0; i < e.dataTransfer.files.length; i++) {\n        const file = e.dataTransfer.files[i];\n        const fileErrors = validateFile(file);\n\n        if (fileErrors.length > 0) {\n          errors.push(...fileErrors);\n        } else {\n          files.push(file);\n        }\n      }\n    }\n\n    if (errors.length > 0) {\n      showNotification('error', errors.join(' '));\n      return;\n    }\n\n    if (files.length > 0) {\n      setUploadFiles(files);\n      setShowUploadModal(true);\n    }\n  };\n\n  // Handle drag over\n  const handleDragOver = (e) => {\n    e.preventDefault();\n    e.stopPropagation();\n  };\n\n  // Improved file reading with chunked processing for large files\n  const readFileAsBase64 = (file) => {\n    return new Promise((resolve, reject) => {\n      try {\n        const reader = new FileReader();\n\n        reader.onload = () => {\n          try {\n            // Remove the data URL prefix (e.g., \"data:application/pdf;base64,\")\n            const base64 = reader.result.split(',')[1];\n            resolve(base64);\n          } catch (error) {\n            console.error('Error processing file data:', error);\n            reject(error);\n          }\n        };\n\n        reader.onerror = (error) => {\n          console.error('FileReader error:', error);\n          reject(error);\n        };\n\n        // Add a timeout for large files\n        const timeout = Math.max(30000, file.size / 1024); // 30s minimum, 1s per KB\n        setTimeout(() => {\n          if (reader.readyState !== 2) {\n            reader.abort();\n            reject(new Error('FileReader timeout - file may be too large'));\n          }\n        }, timeout);\n\n        reader.readAsDataURL(file);\n      } catch (error) {\n        console.error('Error setting up FileReader:', error);\n        reject(error);\n      }\n    });\n  };\n\n  // Handle file upload and commit with improved error handling and LFS support\n  const handleUploadFiles = async () => {\n    if (!commitMessage.trim()) {\n      showNotification('error', 'Please enter a commit message');\n      return;\n    }\n\n    setIsUploading(true);\n    setUploadProgress(0);\n\n    try {\n      // Get the latest commit SHA for the branch\n      const { data: refData } = await octokit.git.getRef({\n        owner: selectedRepo.owner.login,\n        repo: selectedRepo.name,\n        ref: `heads/${currentBranch}`\n      });\n\n      const latestCommitSha = refData.object.sha;\n\n      // Get the base tree\n      const { data: commitData } = await octokit.git.getCommit({\n        owner: selectedRepo.owner.login,\n        repo: selectedRepo.name,\n        commit_sha: latestCommitSha\n      });\n\n      const baseTreeSha = commitData.tree.sha;\n\n      // Create blobs for each file with progress tracking and LFS support\n      const fileBlobs = [];\n      for (let i = 0; i < uploadFiles.length; i++) {\n        const file = uploadFiles[i];\n\n        try {\n          // Update progress\n          setUploadProgress(((i + 0.5) / uploadFiles.length) * 100);\n\n          let blobSha;\n\n          if (needsLFS(file)) {\n            // Handle large files with Git LFS\n            showNotification('info', `Processing large file \"${file.name}\" with Git LFS...`);\n\n            // Calculate SHA256 hash for LFS\n            const sha256Hash = await calculateSHA256(file);\n\n            // Create LFS pointer content\n            const lfsPointer = generateLFSPointer(file, sha256Hash);\n\n            // Create blob with LFS pointer content\n            const { data: blobData } = await octokit.git.createBlob({\n              owner: selectedRepo.owner.login,\n              repo: selectedRepo.name,\n              content: btoa(lfsPointer), // Base64 encode the LFS pointer\n              encoding: 'base64'\n            });\n\n            blobSha = blobData.sha;\n\n            // Note: In a real implementation, you would also need to:\n            // 1. Upload the actual file to LFS storage\n            // 2. Ensure the repository has LFS enabled\n            // For this demo, we're creating the LFS pointer file\n\n          } else {\n            // Handle normal files (under 100MB)\n            const content = await readFileAsBase64(file);\n\n            // Create blob\n            const { data: blobData } = await octokit.git.createBlob({\n              owner: selectedRepo.owner.login,\n              repo: selectedRepo.name,\n              content: content,\n              encoding: 'base64'\n            });\n\n            blobSha = blobData.sha;\n          }\n\n          // Construct proper file path\n          const filePath = joinPaths(currentPath, file.name);\n\n          fileBlobs.push({\n            path: filePath,\n            mode: '100644', // Regular file\n            type: 'blob',\n            sha: blobSha\n          });\n\n          // Update progress\n          setUploadProgress(((i + 1) / uploadFiles.length) * 100);\n\n        } catch (error) {\n          console.error(`Error processing file ${file.name}:`, error);\n          throw new Error(`Failed to process file \"${file.name}\": ${error.message}`);\n        }\n      }\n\n      // Create tree\n      const { data: treeData } = await octokit.git.createTree({\n        owner: selectedRepo.owner.login,\n        repo: selectedRepo.name,\n        base_tree: baseTreeSha,\n        tree: fileBlobs\n      });\n\n      // Create commit\n      const { data: newCommitData } = await octokit.git.createCommit({\n        owner: selectedRepo.owner.login,\n        repo: selectedRepo.name,\n        message: commitMessage,\n        tree: treeData.sha,\n        parents: [latestCommitSha]\n      });\n\n      // Update branch reference\n      await octokit.git.updateRef({\n        owner: selectedRepo.owner.login,\n        repo: selectedRepo.name,\n        ref: `heads/${currentBranch}`,\n        sha: newCommitData.sha,\n        force: true\n      });\n\n      // Refresh contents with retry logic\n      setTimeout(async () => {\n        const success = await loadRepositoryContents(selectedRepo, currentPath, currentBranch);\n        if (!success) {\n          // Try one more time if the first attempt fails\n          setTimeout(() => {\n            loadRepositoryContents(selectedRepo, currentPath, currentBranch);\n          }, 1000);\n        }\n      }, 500);\n\n      // Close modal and clear state\n      setShowUploadModal(false);\n      setUploadFiles([]);\n      setCommitMessage('');\n      setUploadProgress(0);\n\n      const largeFiles = uploadFiles.filter(needsLFS);\n      const regularFiles = uploadFiles.filter(f => !needsLFS(f));\n\n      let successMessage = `Successfully uploaded ${uploadFiles.length} file(s)`;\n      if (largeFiles.length > 0) {\n        successMessage += ` (${largeFiles.length} large file(s) stored with Git LFS)`;\n      }\n\n      showNotification('success', successMessage);\n    } catch (error) {\n      console.error('Error uploading files:', error);\n\n      // Provide more specific error messages\n      if (error.message.includes('too large')) {\n        showNotification('error', 'One or more files are too large. Please use files smaller than 2GB.');\n      } else if (error.message.includes('malformed')) {\n        showNotification('error', 'Invalid file path. Please check file names for special characters.');\n      } else {\n        showNotification('error', `Upload failed: ${error.message}`);\n      }\n    } finally {\n      setIsUploading(false);\n      setUploadProgress(0);\n    }\n  };\n\n\n  // Show notification\n  const showNotification = (type, message) => {\n    setNotification({ type, message });\n    setTimeout(() => setNotification(null), 5000);\n  };\n\n  // Handle login\n  const handleLogin = () => {\n    // For demo purposes, we're using a simplified approach\n    const token = prompt('Enter your GitHub token:');\n    if (token) {\n      localStorage.setItem('github_token', token);\n      initializeGitHub(token);\n    }\n  };\n\n  // Handle logout\n  const handleLogout = () => {\n    localStorage.removeItem('github_token');\n    setAuthenticated(false);\n    setUser(null);\n    setOctokit(null);\n    setRepositories([]);\n    setSelectedRepo(null);\n    setContents([]);\n  };\n\n  return (\n    <AppContainer>\n      <Header>\n        <Title>Git Helper Web - Fixed Version</Title>\n        {authenticated ? (\n          <UserInfo>\n            {user && <UserName>{user.login}</UserName>}\n            <LogoutButton onClick={handleLogout}>Logout</LogoutButton>\n          </UserInfo>\n        ) : (\n          <LoginButton onClick={handleLogin}>Login with GitHub</LoginButton>\n        )}\n      </Header>\n\n      {authenticated ? (\n        <MainContent>\n          <Sidebar>\n            <SidebarHeader>Repositories</SidebarHeader>\n            <RepoList>\n              {repositories.map(repo => (\n                <RepoItem\n                  key={repo.id}\n                  selected={selectedRepo && selectedRepo.id === repo.id}\n                  onClick={() => handleSelectRepository(repo)}\n                >\n                  {repo.name}\n                </RepoItem>\n              ))}\n            </RepoList>\n          </Sidebar>\n\n          <Content>\n            {selectedRepo ? (\n              <>\n                <RepositoryHeader style={{ display: \"flex\", flexWrap: 'wrap' }}  >\n                  <RepoName>{selectedRepo.name}</RepoName>\n                  <BranchSelector >\n                    <label>Branch:</label>\n                    <select\n                      value={currentBranch}\n                      onChange={(e) => handleSelectBranch(e.target.value)}\n                      style={{ width: \"100%\", maxWidth: 500 }}\n                    >\n                      {branches.map(branch => (\n                        <option key={branch} value={branch}>{branch}</option>\n                      ))}\n                    </select>\n                  </BranchSelector>\n                </RepositoryHeader>\n\n                <PathNavigator>\n                  <PathItem onClick={() => loadRepositoryContents(selectedRepo, '', currentBranch)}>\n                    Root\n                  </PathItem>\n                  {currentPath && currentPath.split('/').filter(Boolean).map((part, index, array) => {\n                    const path = array.slice(0, index + 1).join('/');\n                    return (\n                      <React.Fragment key={path}>\n                        <PathSeparator>/</PathSeparator>\n                        <PathItem onClick={() => loadRepositoryContents(selectedRepo, path, currentBranch)}>\n                          {part}\n                        </PathItem>\n                      </React.Fragment>\n                    );\n                  })}\n                </PathNavigator>\n\n                <FileExplorer>\n                  {contents.map(item => (\n                    <FileItem\n                      key={item.sha}\n                      onClick={() => handleNavigate(item)}\n                    >\n                      <FileIcon>{item.type === 'dir' ? '📁' : '📄'}</FileIcon>\n                      <FileName>{item.name}</FileName>\n                    </FileItem>\n                  ))}\n                </FileExplorer>\n\n                <DropZone\n                  onDragOver={handleDragOver}\n                  onDrop={handleDrop}\n                >\n                  <DropZoneText>\n                    Drop files here to upload to current directory\n                    <br />\n                    <small>Maximum file size: {MAX_FILE_SIZE / 1024 / 1024 / 1024}GB per file (Large files use Git LFS)</small>\n                  </DropZoneText>\n                </DropZone>\n              </>\n            ) : (\n              <WelcomeMessage>\n                <h2>Select a Repository</h2>\n                <p>Choose a repository from the sidebar to get started</p>\n              </WelcomeMessage>\n            )}\n          </Content>\n        </MainContent>\n      ) : (\n        <WelcomeMessage>\n          <h2>Welcome to Git Helper Web - Fixed Version</h2>\n          <p>Please login with GitHub to get started</p>\n          <LoginButton onClick={handleLogin}>Login with GitHub</LoginButton>\n        </WelcomeMessage>\n      )}\n\n      {notification && (\n        <Notification type={notification.type}>\n          {notification.message}\n        </Notification>\n      )}\n\n      {showUploadModal && (\n        <Modal>\n          <ModalContent>\n            <ModalHeader>\n              <h3>Upload Files</h3>\n              <CloseButton onClick={() => setShowUploadModal(false)}>×</CloseButton>\n            </ModalHeader>\n            <ModalBody>\n              <h4>Files to upload:</h4>\n              <FileList>\n                {uploadFiles.map((file, index) => {\n                  const sizeInMB = file.size / 1024 / 1024;\n                  const sizeInGB = file.size / 1024 / 1024 / 1024;\n                  const displaySize = sizeInGB >= 1\n                    ? `${sizeInGB.toFixed(2)} GB`\n                    : `${sizeInMB.toFixed(2)} MB`;\n                  const isLFS = needsLFS(file);\n\n                  return (\n                    <FileListItem key={index}>\n                      {file.name} ({displaySize}){isLFS && ' - Will use Git LFS'}\n                    </FileListItem>\n                  );\n                })}\n              </FileList>\n              {isUploading && (\n                <div style={{ marginBottom: '20px' }}>\n                  <div style={{ marginBottom: '8px' }}>Upload Progress: {uploadProgress.toFixed(0)}%</div>\n                  <div style={{\n                    width: '100%',\n                    height: '8px',\n                    backgroundColor: '#21262d',\n                    borderRadius: '4px',\n                    overflow: 'hidden'\n                  }}>\n                    <div style={{\n                      width: `${uploadProgress}%`,\n                      height: '100%',\n                      backgroundColor: '#2ea043',\n                      transition: 'width 0.3s ease'\n                    }}></div>\n                  </div>\n                </div>\n              )}\n              <CommitMessageInput>\n                <label>Commit message:</label>\n                <textarea\n                  value={commitMessage}\n                  onChange={(e) => setCommitMessage(e.target.value)}\n                  placeholder=\"Enter commit message...\"\n                  disabled={isUploading}\n                />\n              </CommitMessageInput>\n            </ModalBody>\n            <ModalFooter>\n              <CancelButton onClick={() => setShowUploadModal(false)} disabled={isUploading}>\n                Cancel\n              </CancelButton>\n              <UploadButton onClick={handleUploadFiles} disabled={isUploading}>\n                {isUploading ? 'Uploading...' : 'Commit Changes'}\n              </UploadButton>\n            </ModalFooter>\n          </ModalContent>\n        </Modal>\n      )}\n    </AppContainer>\n  );\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}