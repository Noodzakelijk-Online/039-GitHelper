{"ast":null,"code":"var _jsxFileName = \"/Users/zainali/web/039-GitHelper/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Octokit } from '@octokit/rest';\nimport { AppContainer, Header, Title, UserInfo, UserName, LoginButton, LogoutButton, MainContent, Sidebar, SidebarHeader, RepoList, RepoItem, Content, RepositoryHeader, RepoName, BranchSelector, PathNavigator, PathItem, PathSeparator, FileExplorer, FileItem, FileIcon, FileName, DropZone, DropZoneText, WelcomeMessage, Notification, Modal, ModalContent, ModalHeader, CloseButton, ModalBody, FileList, FileListItem, CommitMessageInput, ModalFooter, CancelButton, UploadButton } from './styles/StyledComponents';\n\n// GitHub OAuth App credentials would normally be stored securely\n// For demo purposes, we're using placeholder values\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst GITHUB_CLIENT_ID = 'Ov23liar9wjLDWrJz1Lx';\nconst GITHUB_CLIENT_SECRET = '501fe2d9197171e5130909d0794f1eb08d57298f';\n\n// Constants for file handling\nconst MAX_FILE_SIZE = 2 * 1024 * 1024 * 1024; // 2GB per file (increased from 25MB)\nconst GITHUB_BLOB_LIMIT = 100 * 1024 * 1024; // 100MB GitHub API limit\nconst CHUNK_SIZE = 50 * 1024 * 1024; // 50MB chunks for large file processing\n\nconst App = () => {\n  _s();\n  // State variables\n  const [authenticated, setAuthenticated] = useState(false);\n  const [octokit, setOctokit] = useState(null);\n  const [user, setUser] = useState(null);\n  const [repositories, setRepositories] = useState([]);\n  const [selectedRepo, setSelectedRepo] = useState(null);\n  const [currentPath, setCurrentPath] = useState('');\n  const [contents, setContents] = useState([]);\n  const [branches, setBranches] = useState([]);\n  const [currentBranch, setCurrentBranch] = useState('main');\n  const [commitMessage, setCommitMessage] = useState('');\n  const [notification, setNotification] = useState(null);\n  const [uploadFiles, setUploadFiles] = useState([]);\n  const [showUploadModal, setShowUploadModal] = useState(false);\n  const [uploadProgress, setUploadProgress] = useState(0);\n  const [isUploading, setIsUploading] = useState(false);\n\n  // Initialize GitHub on component mount\n  useEffect(() => {\n    // Check if we have a token in localStorage\n    const token = localStorage.getItem('github_token');\n    if (token) {\n      initializeGitHub(token);\n    }\n  }, []);\n\n  // Initialize GitHub with token\n  const initializeGitHub = async token => {\n    try {\n      const octokitInstance = new Octokit({\n        auth: token\n      });\n      setOctokit(octokitInstance);\n\n      // Get authenticated user\n      const {\n        data: userData\n      } = await octokitInstance.users.getAuthenticated();\n      setUser(userData);\n      setAuthenticated(true);\n\n      // Load user repositories\n      await loadUserRepositories(octokitInstance);\n      showNotification('success', `Logged in as ${userData.login}`);\n    } catch (error) {\n      console.error('Authentication error:', error);\n      localStorage.removeItem('github_token');\n      setAuthenticated(false);\n      showNotification('error', 'Authentication failed');\n    }\n  };\n\n  // Load user repositories\n  const loadUserRepositories = async octokitInstance => {\n    try {\n      const {\n        data: repos\n      } = await octokitInstance.repos.listForAuthenticatedUser({\n        sort: 'updated',\n        per_page: 100\n      });\n      setRepositories(repos);\n    } catch (error) {\n      console.error('Error loading repositories:', error);\n      showNotification('error', 'Failed to load repositories');\n    }\n  };\n\n  // Utility function to normalize paths\n  const normalizePath = path => {\n    if (!path || path === '/') return '';\n\n    // Remove leading and trailing slashes, then ensure no double slashes\n    const normalized = path.replace(/^\\/+|\\/+$/g, '').replace(/\\/+/g, '/');\n    return normalized;\n  };\n\n  // Utility function to join paths properly\n  const joinPaths = (...paths) => {\n    const filtered = paths.filter(p => p && p !== '/');\n    if (filtered.length === 0) return '';\n    const joined = filtered.join('/').replace(/\\/+/g, '/');\n    return normalizePath(joined);\n  };\n\n  // Load repository contents with improved path handling\n  const loadRepositoryContents = async (repo, path = '', branch) => {\n    if (!octokit || !repo) return;\n    try {\n      // Use provided branch OR fall back to repo's default branch\n      const targetBranch = branch || repo.default_branch;\n\n      // Clear existing contents first to ensure UI updates\n      setContents([]);\n\n      // Normalize the path to prevent malformed path errors\n      const normalizedPath = normalizePath(path);\n      console.log(`Loading contents for path: ${normalizedPath} on branch: ${targetBranch}`);\n      const {\n        data: contentsData\n      } = await octokit.repos.getContent({\n        owner: repo.owner.login,\n        repo: repo.name,\n        path: normalizedPath,\n        ref: targetBranch,\n        headers: {\n          'If-None-Match': '' // Prevents caching\n        }\n      });\n      setContents(Array.isArray(contentsData) ? contentsData : [contentsData]);\n      setCurrentPath(normalizedPath);\n\n      // Also load branches\n      const {\n        data: branchesData\n      } = await octokit.repos.listBranches({\n        owner: repo.owner.login,\n        repo: repo.name\n      });\n      setBranches(branchesData.map(b => b.name));\n      setCurrentBranch(targetBranch);\n      return true; // Indicate successful loading\n    } catch (error) {\n      console.error('Error loading repository contents:', error);\n      if (error.status === 404) {\n        showNotification('error', 'Path not found in repository');\n      } else if (error.status === 403) {\n        showNotification('error', 'Access denied - check repository permissions');\n      } else {\n        showNotification('error', `Failed to load repository contents: ${error.message}`);\n      }\n      return false;\n    }\n  };\n\n  // Handle repository selection\n  const handleSelectRepository = async repo => {\n    setSelectedRepo(repo);\n    await loadRepositoryContents(repo);\n  };\n\n  // Handle branch selection\n  const handleSelectBranch = async branch => {\n    if (selectedRepo) {\n      await loadRepositoryContents(selectedRepo, currentPath, branch);\n    }\n  };\n\n  // Handle directory navigation\n  const handleNavigate = async item => {\n    if (item.type === 'dir') {\n      await loadRepositoryContents(selectedRepo, item.path, currentBranch);\n    } else {\n      // View file content\n      try {\n        const {\n          data: fileData\n        } = await octokit.repos.getContent({\n          owner: selectedRepo.owner.login,\n          repo: selectedRepo.name,\n          path: item.path,\n          ref: currentBranch\n        });\n\n        // For binary files, fileData.content will be base64 encoded\n        // For text files, we can decode and display\n        if (fileData.encoding === 'base64' && !isImageFile(fileData.name)) {\n          const content = atob(fileData.content);\n          // Here you would display the file content in a modal or viewer\n          console.log('File content:', content);\n          showNotification('info', `Viewing file: ${item.name}`);\n        } else if (isImageFile(fileData.name)) {\n          // Handle image files\n          const imageUrl = `data:image/png;base64,${fileData.content}`;\n          // Display image in a modal or viewer\n          console.log('Image URL:', imageUrl);\n          showNotification('info', `Viewing image: ${item.name}`);\n        }\n      } catch (error) {\n        console.error('Error loading file content:', error);\n        showNotification('error', 'Failed to load file content');\n      }\n    }\n  };\n\n  // Check if file is an image\n  const isImageFile = filename => {\n    const imageExtensions = ['.png', '.jpg', '.jpeg', '.gif', '.svg', '.webp'];\n    return imageExtensions.some(ext => filename.toLowerCase().endsWith(ext));\n  };\n\n  // Check if file needs Git LFS (Large File Storage)\n  const needsLFS = file => {\n    return file.size > GITHUB_BLOB_LIMIT;\n  };\n\n  // Generate LFS pointer content\n  const generateLFSPointer = (file, sha256Hash) => {\n    return `version https://git-lfs.github.com/spec/v1\noid sha256:${sha256Hash}\nsize ${file.size}\n`;\n  };\n\n  // Calculate SHA256 hash for LFS\n  const calculateSHA256 = async file => {\n    const arrayBuffer = await file.arrayBuffer();\n    const hashBuffer = await crypto.subtle.digest('SHA-256', arrayBuffer);\n    const hashArray = Array.from(new Uint8Array(hashBuffer));\n    return hashArray.map(b => b.toString(16).padStart(2, '0')).join('');\n  };\n\n  // Validate file before upload\n  const validateFile = file => {\n    const errors = [];\n\n    // Check file size (now supports up to 2GB)\n    if (file.size > MAX_FILE_SIZE) {\n      errors.push(`File \"${file.name}\" is too large (${(file.size / 1024 / 1024 / 1024).toFixed(2)}GB). Maximum size is ${MAX_FILE_SIZE / 1024 / 1024 / 1024}GB.`);\n    }\n\n    // Check for invalid characters in filename\n    const invalidChars = /[<>:\"|?*\\x00-\\x1f]/;\n    if (invalidChars.test(file.name)) {\n      errors.push(`File \"${file.name}\" contains invalid characters.`);\n    }\n\n    // Warn about large files that will use LFS\n    if (needsLFS(file)) {\n      console.log(`File \"${file.name}\" (${(file.size / 1024 / 1024).toFixed(2)}MB) will be stored using Git LFS.`);\n    }\n    return errors;\n  };\n\n  // Handle file upload via drag and drop\n  const handleDrop = e => {\n    e.preventDefault();\n    e.stopPropagation();\n    if (!authenticated || !selectedRepo) {\n      showNotification('error', 'Please select a repository first');\n      return;\n    }\n    const files = [];\n    const errors = [];\n    if (e.dataTransfer.items) {\n      for (let i = 0; i < e.dataTransfer.items.length; i++) {\n        if (e.dataTransfer.items[i].kind === 'file') {\n          const file = e.dataTransfer.items[i].getAsFile();\n          const fileErrors = validateFile(file);\n          if (fileErrors.length > 0) {\n            errors.push(...fileErrors);\n          } else {\n            files.push(file);\n          }\n        }\n      }\n    } else {\n      for (let i = 0; i < e.dataTransfer.files.length; i++) {\n        const file = e.dataTransfer.files[i];\n        const fileErrors = validateFile(file);\n        if (fileErrors.length > 0) {\n          errors.push(...fileErrors);\n        } else {\n          files.push(file);\n        }\n      }\n    }\n    if (errors.length > 0) {\n      showNotification('error', errors.join(' '));\n      return;\n    }\n    if (files.length > 0) {\n      setUploadFiles(files);\n      setShowUploadModal(true);\n    }\n  };\n\n  // Handle drag over\n  const handleDragOver = e => {\n    e.preventDefault();\n    e.stopPropagation();\n  };\n\n  // Improved file reading with chunked processing for large files\n  const readFileAsBase64 = file => {\n    return new Promise((resolve, reject) => {\n      try {\n        const reader = new FileReader();\n        reader.onload = () => {\n          try {\n            // Remove the data URL prefix (e.g., \"data:application/pdf;base64,\")\n            const base64 = reader.result.split(',')[1];\n            resolve(base64);\n          } catch (error) {\n            console.error('Error processing file data:', error);\n            reject(error);\n          }\n        };\n        reader.onerror = error => {\n          console.error('FileReader error:', error);\n          reject(error);\n        };\n\n        // Add a timeout for large files\n        const timeout = Math.max(30000, file.size / 1024); // 30s minimum, 1s per KB\n        setTimeout(() => {\n          if (reader.readyState !== 2) {\n            reader.abort();\n            reject(new Error('FileReader timeout - file may be too large'));\n          }\n        }, timeout);\n        reader.readAsDataURL(file);\n      } catch (error) {\n        console.error('Error setting up FileReader:', error);\n        reject(error);\n      }\n    });\n  };\n\n  // Handle file upload and commit with improved error handling and LFS support\n  const handleUploadFiles = async () => {\n    if (!commitMessage.trim()) {\n      showNotification('error', 'Please enter a commit message');\n      return;\n    }\n    setIsUploading(true);\n    setUploadProgress(0);\n    try {\n      // Get the latest commit SHA for the branch\n      const {\n        data: refData\n      } = await octokit.git.getRef({\n        owner: selectedRepo.owner.login,\n        repo: selectedRepo.name,\n        ref: `heads/${currentBranch}`\n      });\n      const latestCommitSha = refData.object.sha;\n\n      // Get the base tree\n      const {\n        data: commitData\n      } = await octokit.git.getCommit({\n        owner: selectedRepo.owner.login,\n        repo: selectedRepo.name,\n        commit_sha: latestCommitSha\n      });\n      const baseTreeSha = commitData.tree.sha;\n\n      // Create blobs for each file with progress tracking and LFS support\n      const fileBlobs = [];\n      for (let i = 0; i < uploadFiles.length; i++) {\n        const file = uploadFiles[i];\n        try {\n          // Update progress\n          setUploadProgress((i + 0.5) / uploadFiles.length * 100);\n          let blobSha;\n          if (needsLFS(file)) {\n            // Handle large files with Git LFS\n            showNotification('info', `Processing large file \"${file.name}\" with Git LFS...`);\n\n            // Calculate SHA256 hash for LFS\n            const sha256Hash = await calculateSHA256(file);\n\n            // Create LFS pointer content\n            const lfsPointer = generateLFSPointer(file, sha256Hash);\n\n            // Create blob with LFS pointer content\n            const {\n              data: blobData\n            } = await octokit.git.createBlob({\n              owner: selectedRepo.owner.login,\n              repo: selectedRepo.name,\n              content: btoa(lfsPointer),\n              // Base64 encode the LFS pointer\n              encoding: 'base64'\n            });\n            blobSha = blobData.sha;\n\n            // Note: In a real implementation, you would also need to:\n            // 1. Upload the actual file to LFS storage\n            // 2. Ensure the repository has LFS enabled\n            // For this demo, we're creating the LFS pointer file\n          } else {\n            // Handle normal files (under 100MB)\n            const content = await readFileAsBase64(file);\n\n            // Create blob\n            const {\n              data: blobData\n            } = await octokit.git.createBlob({\n              owner: selectedRepo.owner.login,\n              repo: selectedRepo.name,\n              content: content,\n              encoding: 'base64'\n            });\n            blobSha = blobData.sha;\n          }\n\n          // Construct proper file path\n          const filePath = joinPaths(currentPath, file.name);\n          fileBlobs.push({\n            path: filePath,\n            mode: '100644',\n            // Regular file\n            type: 'blob',\n            sha: blobSha\n          });\n\n          // Update progress\n          setUploadProgress((i + 1) / uploadFiles.length * 100);\n        } catch (error) {\n          console.error(`Error processing file ${file.name}:`, error);\n          throw new Error(`Failed to process file \"${file.name}\": ${error.message}`);\n        }\n      }\n\n      // Create tree\n      const {\n        data: treeData\n      } = await octokit.git.createTree({\n        owner: selectedRepo.owner.login,\n        repo: selectedRepo.name,\n        base_tree: baseTreeSha,\n        tree: fileBlobs\n      });\n\n      // Create commit\n      const {\n        data: newCommitData\n      } = await octokit.git.createCommit({\n        owner: selectedRepo.owner.login,\n        repo: selectedRepo.name,\n        message: commitMessage,\n        tree: treeData.sha,\n        parents: [latestCommitSha]\n      });\n\n      // Update branch reference\n      await octokit.git.updateRef({\n        owner: selectedRepo.owner.login,\n        repo: selectedRepo.name,\n        ref: `heads/${currentBranch}`,\n        sha: newCommitData.sha,\n        force: true\n      });\n\n      // Refresh contents with retry logic\n      setTimeout(async () => {\n        const success = await loadRepositoryContents(selectedRepo, currentPath, currentBranch);\n        if (!success) {\n          // Try one more time if the first attempt fails\n          setTimeout(() => {\n            loadRepositoryContents(selectedRepo, currentPath, currentBranch);\n          }, 1000);\n        }\n      }, 500);\n\n      // Close modal and clear state\n      setShowUploadModal(false);\n      setUploadFiles([]);\n      setCommitMessage('');\n      setUploadProgress(0);\n      const largeFiles = uploadFiles.filter(needsLFS);\n      const regularFiles = uploadFiles.filter(f => !needsLFS(f));\n      let successMessage = `Successfully uploaded ${uploadFiles.length} file(s)`;\n      if (largeFiles.length > 0) {\n        successMessage += ` (${largeFiles.length} large file(s) stored with Git LFS)`;\n      }\n      showNotification('success', successMessage);\n    } catch (error) {\n      console.error('Error uploading files:', error);\n\n      // Provide more specific error messages\n      if (error.message.includes('too large')) {\n        showNotification('error', 'One or more files are too large. Please use files smaller than 2GB.');\n      } else if (error.message.includes('malformed')) {\n        showNotification('error', 'Invalid file path. Please check file names for special characters.');\n      } else {\n        showNotification('error', `Upload failed: ${error.message}`);\n      }\n    } finally {\n      setIsUploading(false);\n      setUploadProgress(0);\n    }\n  };\n\n  // Show notification\n  const showNotification = (type, message) => {\n    setNotification({\n      type,\n      message\n    });\n    setTimeout(() => setNotification(null), 5000);\n  };\n\n  // Handle login\n  const handleLogin = () => {\n    // For demo purposes, we're using a simplified approach\n    const token = prompt('Enter your GitHub token:');\n    if (token) {\n      localStorage.setItem('github_token', token);\n      initializeGitHub(token);\n    }\n  };\n\n  // Handle logout\n  const handleLogout = () => {\n    localStorage.removeItem('github_token');\n    setAuthenticated(false);\n    setUser(null);\n    setOctokit(null);\n    setRepositories([]);\n    setSelectedRepo(null);\n    setContents([]);\n  };\n  return /*#__PURE__*/_jsxDEV(AppContainer, {\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      children: [/*#__PURE__*/_jsxDEV(Title, {\n        children: \"Git Helper Web - Fixed Version\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 588,\n        columnNumber: 9\n      }, this), authenticated ? /*#__PURE__*/_jsxDEV(UserInfo, {\n        children: [user && /*#__PURE__*/_jsxDEV(UserName, {\n          children: user.login\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 591,\n          columnNumber: 22\n        }, this), /*#__PURE__*/_jsxDEV(LogoutButton, {\n          onClick: handleLogout,\n          children: \"Logout\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 592,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 590,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(LoginButton, {\n        onClick: handleLogin,\n        children: \"Login with GitHub\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 595,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 587,\n      columnNumber: 7\n    }, this), authenticated ? /*#__PURE__*/_jsxDEV(MainContent, {\n      children: [/*#__PURE__*/_jsxDEV(Sidebar, {\n        children: [/*#__PURE__*/_jsxDEV(SidebarHeader, {\n          children: \"Repositories\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 602,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(RepoList, {\n          children: repositories.map(repo => /*#__PURE__*/_jsxDEV(RepoItem, {\n            selected: selectedRepo && selectedRepo.id === repo.id,\n            onClick: () => handleSelectRepository(repo),\n            children: repo.name\n          }, repo.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 605,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 603,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 601,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Content, {\n        children: selectedRepo ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(RepositoryHeader, {\n            style: {\n              display: \"flex\",\n              flexWrap: 'wrap'\n            },\n            children: [/*#__PURE__*/_jsxDEV(RepoName, {\n              children: selectedRepo.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 620,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(BranchSelector, {\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                children: \"Branch:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 622,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n                value: currentBranch,\n                onChange: e => handleSelectBranch(e.target.value),\n                style: {\n                  width: \"100%\",\n                  maxWidth: 500\n                },\n                children: branches.map(branch => /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: branch,\n                  children: branch\n                }, branch, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 629,\n                  columnNumber: 25\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 623,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 621,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 619,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(PathNavigator, {\n            children: [/*#__PURE__*/_jsxDEV(PathItem, {\n              onClick: () => loadRepositoryContents(selectedRepo, '', currentBranch),\n              children: \"Root\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 636,\n              columnNumber: 19\n            }, this), currentPath && currentPath.split('/').filter(Boolean).map((part, index, array) => {\n              const path = array.slice(0, index + 1).join('/');\n              return /*#__PURE__*/_jsxDEV(React.Fragment, {\n                children: [/*#__PURE__*/_jsxDEV(PathSeparator, {\n                  children: \"/\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 643,\n                  columnNumber: 25\n                }, this), /*#__PURE__*/_jsxDEV(PathItem, {\n                  onClick: () => loadRepositoryContents(selectedRepo, path, currentBranch),\n                  children: part\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 644,\n                  columnNumber: 25\n                }, this)]\n              }, path, true, {\n                fileName: _jsxFileName,\n                lineNumber: 642,\n                columnNumber: 23\n              }, this);\n            })]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 635,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(FileExplorer, {\n            children: contents.map(item => /*#__PURE__*/_jsxDEV(FileItem, {\n              onClick: () => handleNavigate(item),\n              children: [/*#__PURE__*/_jsxDEV(FileIcon, {\n                children: item.type === 'dir' ? '📁' : '📄'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 658,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(FileName, {\n                children: item.name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 659,\n                columnNumber: 23\n              }, this)]\n            }, item.sha, true, {\n              fileName: _jsxFileName,\n              lineNumber: 654,\n              columnNumber: 21\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 652,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(DropZone, {\n            onDragOver: handleDragOver,\n            onDrop: handleDrop,\n            children: /*#__PURE__*/_jsxDEV(DropZoneText, {\n              children: [\"Drop files here to upload to current directory\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 670,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"small\", {\n                children: [\"Maximum file size: \", MAX_FILE_SIZE / 1024 / 1024 / 1024, \"GB per file (Large files use Git LFS)\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 671,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 668,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 664,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true) : /*#__PURE__*/_jsxDEV(WelcomeMessage, {\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Select a Repository\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 677,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Choose a repository from the sidebar to get started\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 678,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 676,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 616,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 600,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(WelcomeMessage, {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Welcome to Git Helper Web - Fixed Version\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 685,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Please login with GitHub to get started\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 686,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(LoginButton, {\n        onClick: handleLogin,\n        children: \"Login with GitHub\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 687,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 684,\n      columnNumber: 9\n    }, this), notification && /*#__PURE__*/_jsxDEV(Notification, {\n      type: notification.type,\n      children: notification.message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 692,\n      columnNumber: 9\n    }, this), showUploadModal && /*#__PURE__*/_jsxDEV(Modal, {\n      children: /*#__PURE__*/_jsxDEV(ModalContent, {\n        children: [/*#__PURE__*/_jsxDEV(ModalHeader, {\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Upload Files\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 701,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(CloseButton, {\n            onClick: () => setShowUploadModal(false),\n            children: \"\\xD7\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 702,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 700,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(ModalBody, {\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            children: \"Files to upload:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 705,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(FileList, {\n            children: uploadFiles.map((file, index) => {\n              const sizeInMB = file.size / 1024 / 1024;\n              const sizeInGB = file.size / 1024 / 1024 / 1024;\n              const displaySize = sizeInGB >= 1 ? `${sizeInGB.toFixed(2)} GB` : `${sizeInMB.toFixed(2)} MB`;\n              const isLFS = needsLFS(file);\n              return /*#__PURE__*/_jsxDEV(FileListItem, {\n                children: [file.name, \" (\", displaySize, \")\", isLFS && ' - Will use Git LFS']\n              }, index, true, {\n                fileName: _jsxFileName,\n                lineNumber: 716,\n                columnNumber: 21\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 706,\n            columnNumber: 15\n          }, this), isUploading && /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              marginBottom: '20px'\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                marginBottom: '8px'\n              },\n              children: [\"Upload Progress: \", uploadProgress.toFixed(0), \"%\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 724,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                width: '100%',\n                height: '8px',\n                backgroundColor: '#21262d',\n                borderRadius: '4px',\n                overflow: 'hidden'\n              },\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                style: {\n                  width: `${uploadProgress}%`,\n                  height: '100%',\n                  backgroundColor: '#2ea043',\n                  transition: 'width 0.3s ease'\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 732,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 725,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 723,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(CommitMessageInput, {\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"Commit message:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 742,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n              value: commitMessage,\n              onChange: e => setCommitMessage(e.target.value),\n              placeholder: \"Enter commit message...\",\n              disabled: isUploading\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 743,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 741,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 704,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(ModalFooter, {\n          children: [/*#__PURE__*/_jsxDEV(CancelButton, {\n            onClick: () => setShowUploadModal(false),\n            disabled: isUploading,\n            children: \"Cancel\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 752,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(UploadButton, {\n            onClick: handleUploadFiles,\n            disabled: isUploading,\n            children: isUploading ? 'Uploading...' : 'Commit Changes'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 755,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 751,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 699,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 698,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 586,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"kw84I5gxKU2Y0/yu6fU9Yxt/G6A=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","Octokit","AppContainer","Header","Title","UserInfo","UserName","LoginButton","LogoutButton","MainContent","Sidebar","SidebarHeader","RepoList","RepoItem","Content","RepositoryHeader","RepoName","BranchSelector","PathNavigator","PathItem","PathSeparator","FileExplorer","FileItem","FileIcon","FileName","DropZone","DropZoneText","WelcomeMessage","Notification","Modal","ModalContent","ModalHeader","CloseButton","ModalBody","FileList","FileListItem","CommitMessageInput","ModalFooter","CancelButton","UploadButton","jsxDEV","_jsxDEV","Fragment","_Fragment","GITHUB_CLIENT_ID","GITHUB_CLIENT_SECRET","MAX_FILE_SIZE","GITHUB_BLOB_LIMIT","CHUNK_SIZE","App","_s","authenticated","setAuthenticated","octokit","setOctokit","user","setUser","repositories","setRepositories","selectedRepo","setSelectedRepo","currentPath","setCurrentPath","contents","setContents","branches","setBranches","currentBranch","setCurrentBranch","commitMessage","setCommitMessage","notification","setNotification","uploadFiles","setUploadFiles","showUploadModal","setShowUploadModal","uploadProgress","setUploadProgress","isUploading","setIsUploading","token","localStorage","getItem","initializeGitHub","octokitInstance","auth","data","userData","users","getAuthenticated","loadUserRepositories","showNotification","login","error","console","removeItem","repos","listForAuthenticatedUser","sort","per_page","normalizePath","path","normalized","replace","joinPaths","paths","filtered","filter","p","length","joined","join","loadRepositoryContents","repo","branch","targetBranch","default_branch","normalizedPath","log","contentsData","getContent","owner","name","ref","headers","Array","isArray","branchesData","listBranches","map","b","status","message","handleSelectRepository","handleSelectBranch","handleNavigate","item","type","fileData","encoding","isImageFile","content","atob","imageUrl","filename","imageExtensions","some","ext","toLowerCase","endsWith","needsLFS","file","size","generateLFSPointer","sha256Hash","calculateSHA256","arrayBuffer","hashBuffer","crypto","subtle","digest","hashArray","from","Uint8Array","toString","padStart","validateFile","errors","push","toFixed","invalidChars","test","handleDrop","e","preventDefault","stopPropagation","files","dataTransfer","items","i","kind","getAsFile","fileErrors","handleDragOver","readFileAsBase64","Promise","resolve","reject","reader","FileReader","onload","base64","result","split","onerror","timeout","Math","max","setTimeout","readyState","abort","Error","readAsDataURL","handleUploadFiles","trim","refData","git","getRef","latestCommitSha","object","sha","commitData","getCommit","commit_sha","baseTreeSha","tree","fileBlobs","blobSha","lfsPointer","blobData","createBlob","btoa","filePath","mode","treeData","createTree","base_tree","newCommitData","createCommit","parents","updateRef","force","success","largeFiles","regularFiles","f","successMessage","includes","handleLogin","prompt","setItem","handleLogout","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","selected","id","style","display","flexWrap","value","onChange","target","width","maxWidth","Boolean","part","index","array","slice","onDragOver","onDrop","sizeInMB","sizeInGB","displaySize","isLFS","marginBottom","height","backgroundColor","borderRadius","overflow","transition","placeholder","disabled","_c","$RefreshReg$"],"sources":["/Users/zainali/web/039-GitHelper/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Octokit } from '@octokit/rest';\nimport {\n  AppContainer,\n  Header,\n  Title,\n  UserInfo,\n  UserName,\n  LoginButton,\n  LogoutButton,\n  MainContent,\n  Sidebar,\n  SidebarHeader,\n  RepoList,\n  RepoItem,\n  Content,\n  RepositoryHeader,\n  RepoName,\n  BranchSelector,\n  PathNavigator,\n  PathItem,\n  PathSeparator,\n  FileExplorer,\n  FileItem,\n  FileIcon,\n  FileName,\n  DropZone,\n  DropZoneText,\n  WelcomeMessage,\n  Notification,\n  Modal,\n  ModalContent,\n  ModalHeader,\n  CloseButton,\n  ModalBody,\n  FileList,\n  FileListItem,\n  CommitMessageInput,\n  ModalFooter,\n  CancelButton,\n  UploadButton\n} from './styles/StyledComponents';\n\n// GitHub OAuth App credentials would normally be stored securely\n// For demo purposes, we're using placeholder values\nconst GITHUB_CLIENT_ID = 'Ov23liar9wjLDWrJz1Lx';\nconst GITHUB_CLIENT_SECRET = '501fe2d9197171e5130909d0794f1eb08d57298f';\n\n// Constants for file handling\nconst MAX_FILE_SIZE = 2 * 1024 * 1024 * 1024; // 2GB per file (increased from 25MB)\nconst GITHUB_BLOB_LIMIT = 100 * 1024 * 1024; // 100MB GitHub API limit\nconst CHUNK_SIZE = 50 * 1024 * 1024; // 50MB chunks for large file processing\n\n\n\nconst App = () => {\n  // State variables\n  const [authenticated, setAuthenticated] = useState(false);\n  const [octokit, setOctokit] = useState(null);\n  const [user, setUser] = useState(null);\n  const [repositories, setRepositories] = useState([]);\n  const [selectedRepo, setSelectedRepo] = useState(null);\n  const [currentPath, setCurrentPath] = useState('');\n  const [contents, setContents] = useState([]);\n  const [branches, setBranches] = useState([]);\n  const [currentBranch, setCurrentBranch] = useState('main');\n  const [commitMessage, setCommitMessage] = useState('');\n  const [notification, setNotification] = useState(null);\n  const [uploadFiles, setUploadFiles] = useState([]);\n  const [showUploadModal, setShowUploadModal] = useState(false);\n  const [uploadProgress, setUploadProgress] = useState(0);\n  const [isUploading, setIsUploading] = useState(false);\n\n  // Initialize GitHub on component mount\n  useEffect(() => {\n    // Check if we have a token in localStorage\n    const token = localStorage.getItem('github_token');\n\n    if (token) {\n      initializeGitHub(token);\n    }\n  }, []);\n\n  // Initialize GitHub with token\n  const initializeGitHub = async (token) => {\n    try {\n      const octokitInstance = new Octokit({\n        auth: token\n      });\n\n      setOctokit(octokitInstance);\n\n      // Get authenticated user\n      const { data: userData } = await octokitInstance.users.getAuthenticated();\n      setUser(userData);\n      setAuthenticated(true);\n\n      // Load user repositories\n      await loadUserRepositories(octokitInstance);\n\n      showNotification('success', `Logged in as ${userData.login}`);\n    } catch (error) {\n      console.error('Authentication error:', error);\n      localStorage.removeItem('github_token');\n      setAuthenticated(false);\n      showNotification('error', 'Authentication failed');\n    }\n  };\n\n  // Load user repositories\n  const loadUserRepositories = async (octokitInstance) => {\n    try {\n      const { data: repos } = await octokitInstance.repos.listForAuthenticatedUser({\n        sort: 'updated',\n        per_page: 100\n      });\n      setRepositories(repos);\n    } catch (error) {\n      console.error('Error loading repositories:', error);\n      showNotification('error', 'Failed to load repositories');\n    }\n  };\n\n  // Utility function to normalize paths\n  const normalizePath = (path) => {\n    if (!path || path === '/') return '';\n\n    // Remove leading and trailing slashes, then ensure no double slashes\n    const normalized = path.replace(/^\\/+|\\/+$/g, '').replace(/\\/+/g, '/');\n    return normalized;\n  };\n\n  // Utility function to join paths properly\n  const joinPaths = (...paths) => {\n    const filtered = paths.filter(p => p && p !== '/');\n    if (filtered.length === 0) return '';\n\n    const joined = filtered.join('/').replace(/\\/+/g, '/');\n    return normalizePath(joined);\n  };\n\n  // Load repository contents with improved path handling\n  const loadRepositoryContents = async (repo, path = '', branch) => {\n    if (!octokit || !repo) return;\n\n    try {\n      // Use provided branch OR fall back to repo's default branch\n      const targetBranch = branch || repo.default_branch;\n\n      // Clear existing contents first to ensure UI updates\n      setContents([]);\n\n      // Normalize the path to prevent malformed path errors\n      const normalizedPath = normalizePath(path);\n\n      console.log(`Loading contents for path: ${normalizedPath} on branch: ${targetBranch}`);\n\n      const { data: contentsData } = await octokit.repos.getContent({\n        owner: repo.owner.login,\n        repo: repo.name,\n        path: normalizedPath,\n        ref: targetBranch,\n        headers: {\n          'If-None-Match': '' // Prevents caching\n        }\n      });\n\n      setContents(Array.isArray(contentsData) ? contentsData : [contentsData]);\n      setCurrentPath(normalizedPath);\n\n      // Also load branches\n      const { data: branchesData } = await octokit.repos.listBranches({\n        owner: repo.owner.login,\n        repo: repo.name\n      });\n\n      setBranches(branchesData.map(b => b.name));\n      setCurrentBranch(targetBranch);\n\n      return true; // Indicate successful loading\n    } catch (error) {\n      console.error('Error loading repository contents:', error);\n\n      if (error.status === 404) {\n        showNotification('error', 'Path not found in repository');\n      } else if (error.status === 403) {\n        showNotification('error', 'Access denied - check repository permissions');\n      } else {\n        showNotification('error', `Failed to load repository contents: ${error.message}`);\n      }\n      return false;\n    }\n  };\n\n\n  // Handle repository selection\n  const handleSelectRepository = async (repo) => {\n    setSelectedRepo(repo);\n    await loadRepositoryContents(repo);\n  };\n\n  // Handle branch selection\n  const handleSelectBranch = async (branch) => {\n    if (selectedRepo) {\n      await loadRepositoryContents(selectedRepo, currentPath, branch);\n    }\n  };\n\n  // Handle directory navigation\n  const handleNavigate = async (item) => {\n    if (item.type === 'dir') {\n      await loadRepositoryContents(selectedRepo, item.path, currentBranch);\n    } else {\n      // View file content\n      try {\n        const { data: fileData } = await octokit.repos.getContent({\n          owner: selectedRepo.owner.login,\n          repo: selectedRepo.name,\n          path: item.path,\n          ref: currentBranch\n        });\n\n        // For binary files, fileData.content will be base64 encoded\n        // For text files, we can decode and display\n        if (fileData.encoding === 'base64' && !isImageFile(fileData.name)) {\n          const content = atob(fileData.content);\n          // Here you would display the file content in a modal or viewer\n          console.log('File content:', content);\n          showNotification('info', `Viewing file: ${item.name}`);\n        } else if (isImageFile(fileData.name)) {\n          // Handle image files\n          const imageUrl = `data:image/png;base64,${fileData.content}`;\n          // Display image in a modal or viewer\n          console.log('Image URL:', imageUrl);\n          showNotification('info', `Viewing image: ${item.name}`);\n        }\n      } catch (error) {\n        console.error('Error loading file content:', error);\n        showNotification('error', 'Failed to load file content');\n      }\n    }\n  };\n\n  // Check if file is an image\n  const isImageFile = (filename) => {\n    const imageExtensions = ['.png', '.jpg', '.jpeg', '.gif', '.svg', '.webp'];\n    return imageExtensions.some(ext => filename.toLowerCase().endsWith(ext));\n  };\n\n  // Check if file needs Git LFS (Large File Storage)\n  const needsLFS = (file) => {\n    return file.size > GITHUB_BLOB_LIMIT;\n  };\n\n  // Generate LFS pointer content\n  const generateLFSPointer = (file, sha256Hash) => {\n    return `version https://git-lfs.github.com/spec/v1\noid sha256:${sha256Hash}\nsize ${file.size}\n`;\n  };\n\n  // Calculate SHA256 hash for LFS\n  const calculateSHA256 = async (file) => {\n    const arrayBuffer = await file.arrayBuffer();\n    const hashBuffer = await crypto.subtle.digest('SHA-256', arrayBuffer);\n    const hashArray = Array.from(new Uint8Array(hashBuffer));\n    return hashArray.map(b => b.toString(16).padStart(2, '0')).join('');\n  };\n\n  // Validate file before upload\n  const validateFile = (file) => {\n    const errors = [];\n\n    // Check file size (now supports up to 2GB)\n    if (file.size > MAX_FILE_SIZE) {\n      errors.push(`File \"${file.name}\" is too large (${(file.size / 1024 / 1024 / 1024).toFixed(2)}GB). Maximum size is ${MAX_FILE_SIZE / 1024 / 1024 / 1024}GB.`);\n    }\n\n    // Check for invalid characters in filename\n    const invalidChars = /[<>:\"|?*\\x00-\\x1f]/;\n    if (invalidChars.test(file.name)) {\n      errors.push(`File \"${file.name}\" contains invalid characters.`);\n    }\n\n    // Warn about large files that will use LFS\n    if (needsLFS(file)) {\n      console.log(`File \"${file.name}\" (${(file.size / 1024 / 1024).toFixed(2)}MB) will be stored using Git LFS.`);\n    }\n\n    return errors;\n  };\n\n  // Handle file upload via drag and drop\n  const handleDrop = (e) => {\n    e.preventDefault();\n    e.stopPropagation();\n\n    if (!authenticated || !selectedRepo) {\n      showNotification('error', 'Please select a repository first');\n      return;\n    }\n\n    const files = [];\n    const errors = [];\n\n    if (e.dataTransfer.items) {\n      for (let i = 0; i < e.dataTransfer.items.length; i++) {\n        if (e.dataTransfer.items[i].kind === 'file') {\n          const file = e.dataTransfer.items[i].getAsFile();\n          const fileErrors = validateFile(file);\n\n          if (fileErrors.length > 0) {\n            errors.push(...fileErrors);\n          } else {\n            files.push(file);\n          }\n        }\n      }\n    } else {\n      for (let i = 0; i < e.dataTransfer.files.length; i++) {\n        const file = e.dataTransfer.files[i];\n        const fileErrors = validateFile(file);\n\n        if (fileErrors.length > 0) {\n          errors.push(...fileErrors);\n        } else {\n          files.push(file);\n        }\n      }\n    }\n\n    if (errors.length > 0) {\n      showNotification('error', errors.join(' '));\n      return;\n    }\n\n    if (files.length > 0) {\n      setUploadFiles(files);\n      setShowUploadModal(true);\n    }\n  };\n\n  // Handle drag over\n  const handleDragOver = (e) => {\n    e.preventDefault();\n    e.stopPropagation();\n  };\n\n  // Improved file reading with chunked processing for large files\n  const readFileAsBase64 = (file) => {\n    return new Promise((resolve, reject) => {\n      try {\n        const reader = new FileReader();\n\n        reader.onload = () => {\n          try {\n            // Remove the data URL prefix (e.g., \"data:application/pdf;base64,\")\n            const base64 = reader.result.split(',')[1];\n            resolve(base64);\n          } catch (error) {\n            console.error('Error processing file data:', error);\n            reject(error);\n          }\n        };\n\n        reader.onerror = (error) => {\n          console.error('FileReader error:', error);\n          reject(error);\n        };\n\n        // Add a timeout for large files\n        const timeout = Math.max(30000, file.size / 1024); // 30s minimum, 1s per KB\n        setTimeout(() => {\n          if (reader.readyState !== 2) {\n            reader.abort();\n            reject(new Error('FileReader timeout - file may be too large'));\n          }\n        }, timeout);\n\n        reader.readAsDataURL(file);\n      } catch (error) {\n        console.error('Error setting up FileReader:', error);\n        reject(error);\n      }\n    });\n  };\n\n  // Handle file upload and commit with improved error handling and LFS support\n  const handleUploadFiles = async () => {\n    if (!commitMessage.trim()) {\n      showNotification('error', 'Please enter a commit message');\n      return;\n    }\n\n    setIsUploading(true);\n    setUploadProgress(0);\n\n    try {\n      // Get the latest commit SHA for the branch\n      const { data: refData } = await octokit.git.getRef({\n        owner: selectedRepo.owner.login,\n        repo: selectedRepo.name,\n        ref: `heads/${currentBranch}`\n      });\n\n      const latestCommitSha = refData.object.sha;\n\n      // Get the base tree\n      const { data: commitData } = await octokit.git.getCommit({\n        owner: selectedRepo.owner.login,\n        repo: selectedRepo.name,\n        commit_sha: latestCommitSha\n      });\n\n      const baseTreeSha = commitData.tree.sha;\n\n      // Create blobs for each file with progress tracking and LFS support\n      const fileBlobs = [];\n      for (let i = 0; i < uploadFiles.length; i++) {\n        const file = uploadFiles[i];\n\n        try {\n          // Update progress\n          setUploadProgress(((i + 0.5) / uploadFiles.length) * 100);\n\n          let blobSha;\n\n          if (needsLFS(file)) {\n            // Handle large files with Git LFS\n            showNotification('info', `Processing large file \"${file.name}\" with Git LFS...`);\n\n            // Calculate SHA256 hash for LFS\n            const sha256Hash = await calculateSHA256(file);\n\n            // Create LFS pointer content\n            const lfsPointer = generateLFSPointer(file, sha256Hash);\n\n            // Create blob with LFS pointer content\n            const { data: blobData } = await octokit.git.createBlob({\n              owner: selectedRepo.owner.login,\n              repo: selectedRepo.name,\n              content: btoa(lfsPointer), // Base64 encode the LFS pointer\n              encoding: 'base64'\n            });\n\n            blobSha = blobData.sha;\n\n            // Note: In a real implementation, you would also need to:\n            // 1. Upload the actual file to LFS storage\n            // 2. Ensure the repository has LFS enabled\n            // For this demo, we're creating the LFS pointer file\n\n          } else {\n            // Handle normal files (under 100MB)\n            const content = await readFileAsBase64(file);\n\n            // Create blob\n            const { data: blobData } = await octokit.git.createBlob({\n              owner: selectedRepo.owner.login,\n              repo: selectedRepo.name,\n              content: content,\n              encoding: 'base64'\n            });\n\n            blobSha = blobData.sha;\n          }\n\n          // Construct proper file path\n          const filePath = joinPaths(currentPath, file.name);\n\n          fileBlobs.push({\n            path: filePath,\n            mode: '100644', // Regular file\n            type: 'blob',\n            sha: blobSha\n          });\n\n          // Update progress\n          setUploadProgress(((i + 1) / uploadFiles.length) * 100);\n\n        } catch (error) {\n          console.error(`Error processing file ${file.name}:`, error);\n          throw new Error(`Failed to process file \"${file.name}\": ${error.message}`);\n        }\n      }\n\n      // Create tree\n      const { data: treeData } = await octokit.git.createTree({\n        owner: selectedRepo.owner.login,\n        repo: selectedRepo.name,\n        base_tree: baseTreeSha,\n        tree: fileBlobs\n      });\n\n      // Create commit\n      const { data: newCommitData } = await octokit.git.createCommit({\n        owner: selectedRepo.owner.login,\n        repo: selectedRepo.name,\n        message: commitMessage,\n        tree: treeData.sha,\n        parents: [latestCommitSha]\n      });\n\n      // Update branch reference\n      await octokit.git.updateRef({\n        owner: selectedRepo.owner.login,\n        repo: selectedRepo.name,\n        ref: `heads/${currentBranch}`,\n        sha: newCommitData.sha,\n        force: true\n      });\n\n      // Refresh contents with retry logic\n      setTimeout(async () => {\n        const success = await loadRepositoryContents(selectedRepo, currentPath, currentBranch);\n        if (!success) {\n          // Try one more time if the first attempt fails\n          setTimeout(() => {\n            loadRepositoryContents(selectedRepo, currentPath, currentBranch);\n          }, 1000);\n        }\n      }, 500);\n\n      // Close modal and clear state\n      setShowUploadModal(false);\n      setUploadFiles([]);\n      setCommitMessage('');\n      setUploadProgress(0);\n\n      const largeFiles = uploadFiles.filter(needsLFS);\n      const regularFiles = uploadFiles.filter(f => !needsLFS(f));\n\n      let successMessage = `Successfully uploaded ${uploadFiles.length} file(s)`;\n      if (largeFiles.length > 0) {\n        successMessage += ` (${largeFiles.length} large file(s) stored with Git LFS)`;\n      }\n\n      showNotification('success', successMessage);\n    } catch (error) {\n      console.error('Error uploading files:', error);\n\n      // Provide more specific error messages\n      if (error.message.includes('too large')) {\n        showNotification('error', 'One or more files are too large. Please use files smaller than 2GB.');\n      } else if (error.message.includes('malformed')) {\n        showNotification('error', 'Invalid file path. Please check file names for special characters.');\n      } else {\n        showNotification('error', `Upload failed: ${error.message}`);\n      }\n    } finally {\n      setIsUploading(false);\n      setUploadProgress(0);\n    }\n  };\n\n\n  // Show notification\n  const showNotification = (type, message) => {\n    setNotification({ type, message });\n    setTimeout(() => setNotification(null), 5000);\n  };\n\n  // Handle login\n  const handleLogin = () => {\n    // For demo purposes, we're using a simplified approach\n    const token = prompt('Enter your GitHub token:');\n    if (token) {\n      localStorage.setItem('github_token', token);\n      initializeGitHub(token);\n    }\n  };\n\n  // Handle logout\n  const handleLogout = () => {\n    localStorage.removeItem('github_token');\n    setAuthenticated(false);\n    setUser(null);\n    setOctokit(null);\n    setRepositories([]);\n    setSelectedRepo(null);\n    setContents([]);\n  };\n\n  return (\n    <AppContainer>\n      <Header>\n        <Title>Git Helper Web - Fixed Version</Title>\n        {authenticated ? (\n          <UserInfo>\n            {user && <UserName>{user.login}</UserName>}\n            <LogoutButton onClick={handleLogout}>Logout</LogoutButton>\n          </UserInfo>\n        ) : (\n          <LoginButton onClick={handleLogin}>Login with GitHub</LoginButton>\n        )}\n      </Header>\n\n      {authenticated ? (\n        <MainContent>\n          <Sidebar>\n            <SidebarHeader>Repositories</SidebarHeader>\n            <RepoList>\n              {repositories.map(repo => (\n                <RepoItem\n                  key={repo.id}\n                  selected={selectedRepo && selectedRepo.id === repo.id}\n                  onClick={() => handleSelectRepository(repo)}\n                >\n                  {repo.name}\n                </RepoItem>\n              ))}\n            </RepoList>\n          </Sidebar>\n\n          <Content>\n            {selectedRepo ? (\n              <>\n                <RepositoryHeader style={{ display: \"flex\", flexWrap: 'wrap' }}  >\n                  <RepoName>{selectedRepo.name}</RepoName>\n                  <BranchSelector >\n                    <label>Branch:</label>\n                    <select\n                      value={currentBranch}\n                      onChange={(e) => handleSelectBranch(e.target.value)}\n                      style={{ width: \"100%\", maxWidth: 500 }}\n                    >\n                      {branches.map(branch => (\n                        <option key={branch} value={branch}>{branch}</option>\n                      ))}\n                    </select>\n                  </BranchSelector>\n                </RepositoryHeader>\n\n                <PathNavigator>\n                  <PathItem onClick={() => loadRepositoryContents(selectedRepo, '', currentBranch)}>\n                    Root\n                  </PathItem>\n                  {currentPath && currentPath.split('/').filter(Boolean).map((part, index, array) => {\n                    const path = array.slice(0, index + 1).join('/');\n                    return (\n                      <React.Fragment key={path}>\n                        <PathSeparator>/</PathSeparator>\n                        <PathItem onClick={() => loadRepositoryContents(selectedRepo, path, currentBranch)}>\n                          {part}\n                        </PathItem>\n                      </React.Fragment>\n                    );\n                  })}\n                </PathNavigator>\n\n                <FileExplorer>\n                  {contents.map(item => (\n                    <FileItem\n                      key={item.sha}\n                      onClick={() => handleNavigate(item)}\n                    >\n                      <FileIcon>{item.type === 'dir' ? '📁' : '📄'}</FileIcon>\n                      <FileName>{item.name}</FileName>\n                    </FileItem>\n                  ))}\n                </FileExplorer>\n\n                <DropZone\n                  onDragOver={handleDragOver}\n                  onDrop={handleDrop}\n                >\n                  <DropZoneText>\n                    Drop files here to upload to current directory\n                    <br />\n                    <small>Maximum file size: {MAX_FILE_SIZE / 1024 / 1024 / 1024}GB per file (Large files use Git LFS)</small>\n                  </DropZoneText>\n                </DropZone>\n              </>\n            ) : (\n              <WelcomeMessage>\n                <h2>Select a Repository</h2>\n                <p>Choose a repository from the sidebar to get started</p>\n              </WelcomeMessage>\n            )}\n          </Content>\n        </MainContent>\n      ) : (\n        <WelcomeMessage>\n          <h2>Welcome to Git Helper Web - Fixed Version</h2>\n          <p>Please login with GitHub to get started</p>\n          <LoginButton onClick={handleLogin}>Login with GitHub</LoginButton>\n        </WelcomeMessage>\n      )}\n\n      {notification && (\n        <Notification type={notification.type}>\n          {notification.message}\n        </Notification>\n      )}\n\n      {showUploadModal && (\n        <Modal>\n          <ModalContent>\n            <ModalHeader>\n              <h3>Upload Files</h3>\n              <CloseButton onClick={() => setShowUploadModal(false)}>×</CloseButton>\n            </ModalHeader>\n            <ModalBody>\n              <h4>Files to upload:</h4>\n              <FileList>\n                {uploadFiles.map((file, index) => {\n                  const sizeInMB = file.size / 1024 / 1024;\n                  const sizeInGB = file.size / 1024 / 1024 / 1024;\n                  const displaySize = sizeInGB >= 1\n                    ? `${sizeInGB.toFixed(2)} GB`\n                    : `${sizeInMB.toFixed(2)} MB`;\n                  const isLFS = needsLFS(file);\n\n                  return (\n                    <FileListItem key={index}>\n                      {file.name} ({displaySize}){isLFS && ' - Will use Git LFS'}\n                    </FileListItem>\n                  );\n                })}\n              </FileList>\n              {isUploading && (\n                <div style={{ marginBottom: '20px' }}>\n                  <div style={{ marginBottom: '8px' }}>Upload Progress: {uploadProgress.toFixed(0)}%</div>\n                  <div style={{\n                    width: '100%',\n                    height: '8px',\n                    backgroundColor: '#21262d',\n                    borderRadius: '4px',\n                    overflow: 'hidden'\n                  }}>\n                    <div style={{\n                      width: `${uploadProgress}%`,\n                      height: '100%',\n                      backgroundColor: '#2ea043',\n                      transition: 'width 0.3s ease'\n                    }}></div>\n                  </div>\n                </div>\n              )}\n              <CommitMessageInput>\n                <label>Commit message:</label>\n                <textarea\n                  value={commitMessage}\n                  onChange={(e) => setCommitMessage(e.target.value)}\n                  placeholder=\"Enter commit message...\"\n                  disabled={isUploading}\n                />\n              </CommitMessageInput>\n            </ModalBody>\n            <ModalFooter>\n              <CancelButton onClick={() => setShowUploadModal(false)} disabled={isUploading}>\n                Cancel\n              </CancelButton>\n              <UploadButton onClick={handleUploadFiles} disabled={isUploading}>\n                {isUploading ? 'Uploading...' : 'Commit Changes'}\n              </UploadButton>\n            </ModalFooter>\n          </ModalContent>\n        </Modal>\n      )}\n    </AppContainer>\n  );\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}